{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Mini Pruno2D Demo image_classification_efficientnet_fine_tuning","provenance":[{"file_id":"1swNXYiVYqai0l7BJ3SgvzVFBZ12Ievkp","timestamp":1620016599532},{"file_id":"https://github.com/keras-team/keras-io/blob/master/examples/vision/ipynb/image_classification_efficientnet_fine_tuning.ipynb","timestamp":1616821366376}],"collapsed_sections":[],"machine_shape":"hm"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.0"},"accelerator":"GPU","widgets":{"application/vnd.jupyter.widget-state+json":{"25f2e27bd07f4374bed853c20a40c4dc":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_93857bb3bbd240fa8c8874ac8f654fb0","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_7dad1c80902a470493a865b3aff5c568","IPY_MODEL_2f48fe644f824e6f9b82b71966092a88"]}},"93857bb3bbd240fa8c8874ac8f654fb0":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"7dad1c80902a470493a865b3aff5c568":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_331d94b30d4245d99055a12beaa5e3ca","_dom_classes":[],"description":"Dl Completed...: 100%","_model_name":"FloatProgressModel","bar_style":"success","max":1,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":1,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_76354ec0ce4943c6817483a68f0f5c7d"}},"2f48fe644f824e6f9b82b71966092a88":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_3fb65370178942b1af36c57d8d879f41","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 1/1 [01:03&lt;00:00, 63.90s/ url]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_7174114c1fda4942b1efa5d61fc09c18"}},"331d94b30d4245d99055a12beaa5e3ca":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"76354ec0ce4943c6817483a68f0f5c7d":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"3fb65370178942b1af36c57d8d879f41":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"7174114c1fda4942b1efa5d61fc09c18":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"040cbaaa15fd4461aa526a6571e471e7":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_4cc9d49906634000a0f2c949e6a80772","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_e0ef2440369d4e91ad73c305cea9c09e","IPY_MODEL_22efdc0bbe00475fb632de281d1642ba"]}},"4cc9d49906634000a0f2c949e6a80772":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"e0ef2440369d4e91ad73c305cea9c09e":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_24f7108954174666adc0b54dcb445c3f","_dom_classes":[],"description":"Dl Size...: 100%","_model_name":"FloatProgressModel","bar_style":"success","max":1,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":1,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_c84bd55df90d48f9a2c9418974f2cbed"}},"22efdc0bbe00475fb632de281d1642ba":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_121891a9fbbf4dbe9bc985b6e24387fe","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 756/756 [01:03&lt;00:00, 11.83 MiB/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_a77f0edcb8354a8daaf1f800accdb388"}},"24f7108954174666adc0b54dcb445c3f":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"c84bd55df90d48f9a2c9418974f2cbed":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"121891a9fbbf4dbe9bc985b6e24387fe":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"a77f0edcb8354a8daaf1f800accdb388":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"9740dba8902d4f2ea74854f05fe53e2f":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_7522fab41b95497882afdc5252f69303","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_d121e65eca52400fadf9a2c4d19b44ce","IPY_MODEL_c6008adbe21e49d7af8c1acfbca9239b"]}},"7522fab41b95497882afdc5252f69303":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"d121e65eca52400fadf9a2c4d19b44ce":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_f7daa6cd7d094d069446d52ea80ea2ed","_dom_classes":[],"description":"Dl Completed...: 100%","_model_name":"FloatProgressModel","bar_style":"success","max":1,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":1,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_30a7045c41c54fa8ac47b4fc840fff6d"}},"c6008adbe21e49d7af8c1acfbca9239b":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_9fec2cdc28d54c36893ebf021945c199","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 2/2 [00:07&lt;00:00,  3.90s/ url]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_bd747d9772c749db966eaf992d571e8c"}},"f7daa6cd7d094d069446d52ea80ea2ed":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"30a7045c41c54fa8ac47b4fc840fff6d":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"9fec2cdc28d54c36893ebf021945c199":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"bd747d9772c749db966eaf992d571e8c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"b632e5fa834347af932c893448678ee7":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_9372e1cdd68845ba83ce511e6a235458","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_4783b90121a54f3898c2f3e7f457559a","IPY_MODEL_5a74381be53d45ada9435dd56310f95a"]}},"9372e1cdd68845ba83ce511e6a235458":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"4783b90121a54f3898c2f3e7f457559a":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_0eb1163ed3d343bc9f1b3372a3e2bcf5","_dom_classes":[],"description":"Dl Size...: 100%","_model_name":"FloatProgressModel","bar_style":"success","max":1,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":1,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_c4729bd7b66e4adcb737325baa0262b2"}},"5a74381be53d45ada9435dd56310f95a":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_c9a9ca4f740d4c90b7910d5390ec9533","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 20/20 [00:07&lt;00:00,  2.57 MiB/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_0dbea96a21e940378c66f62f04032e56"}},"0eb1163ed3d343bc9f1b3372a3e2bcf5":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"c4729bd7b66e4adcb737325baa0262b2":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"c9a9ca4f740d4c90b7910d5390ec9533":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"0dbea96a21e940378c66f62f04032e56":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"6af759901bf84cc2ae8aa458047eeacd":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_27abd7f271074e16ab8b0d857f59a425","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_52efe11421fb4653aeab2ce8a1b68940","IPY_MODEL_1d89ef1665074429ae06fa1f885481ca"]}},"27abd7f271074e16ab8b0d857f59a425":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"52efe11421fb4653aeab2ce8a1b68940":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_7e0b86fbc2ac400b8c8a93e92dc30d73","_dom_classes":[],"description":"Extraction completed...: 100%","_model_name":"FloatProgressModel","bar_style":"success","max":1,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":1,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_cc56007cc49e44f8b2550dafe57406af"}},"1d89ef1665074429ae06fa1f885481ca":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_2907ade19cee44ba9ac5748e1c002f9f","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 2/2 [00:07&lt;00:00,  3.87s/ file]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_64f2b28bb1eb439cb6cb6956dacf6fc5"}},"7e0b86fbc2ac400b8c8a93e92dc30d73":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"cc56007cc49e44f8b2550dafe57406af":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"2907ade19cee44ba9ac5748e1c002f9f":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"64f2b28bb1eb439cb6cb6956dacf6fc5":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"3f00263917ed4245ab2cae4fb857b2e7":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_c430f83776ec49528073d4a141ae412c","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_3e151b76862242b8bad72817823187a7","IPY_MODEL_c3464f90f03b4886bb304008f36cbce8"]}},"c430f83776ec49528073d4a141ae412c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"3e151b76862242b8bad72817823187a7":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_aecc17a40181418c8b8fe833a30beba1","_dom_classes":[],"description":"","_model_name":"FloatProgressModel","bar_style":"info","max":1,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":1,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_406f6d816d19402585384755395198f2"}},"c3464f90f03b4886bb304008f36cbce8":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_dab200d57a3a4175989effb20ed7a779","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 12000/0 [00:11&lt;00:00, 1043.59 examples/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_553e0418ef9849b09c9d79975defb1f3"}},"aecc17a40181418c8b8fe833a30beba1":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"406f6d816d19402585384755395198f2":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"dab200d57a3a4175989effb20ed7a779":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"553e0418ef9849b09c9d79975defb1f3":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"0c6f0f53169646288bc7e81d6dcadeb3":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_9ca01046017e4269b9fb69aa85109475","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_84d3f22c97b6438fa9e5271d40bb511f","IPY_MODEL_547d93c679414b3d8515b4a764c6d540"]}},"9ca01046017e4269b9fb69aa85109475":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"84d3f22c97b6438fa9e5271d40bb511f":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_13ed8267239249a59cf4dbb4090ef739","_dom_classes":[],"description":" 86%","_model_name":"FloatProgressModel","bar_style":"danger","max":12000,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":10377,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_2c9419f021df445f96117f51db5e4e68"}},"547d93c679414b3d8515b4a764c6d540":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_4c913049bfd64f599e2abba354dec39f","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 10377/12000 [00:00&lt;00:00, 24312.99 examples/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_6ec5d45176944eed89b317b534546bbf"}},"13ed8267239249a59cf4dbb4090ef739":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"2c9419f021df445f96117f51db5e4e68":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"4c913049bfd64f599e2abba354dec39f":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"6ec5d45176944eed89b317b534546bbf":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"867a9ec5bba64711bf838ff594d132e4":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_1c2b1f53ef484b8b9f53b27cb0fad49f","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_d00989a10d5f4172838060d91ffdfddd","IPY_MODEL_ea5565fea05a47abbd216a79b6b5c680"]}},"1c2b1f53ef484b8b9f53b27cb0fad49f":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"d00989a10d5f4172838060d91ffdfddd":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_40cb3111217944eaa793e0ca2d45e0b7","_dom_classes":[],"description":"","_model_name":"FloatProgressModel","bar_style":"info","max":1,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":1,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_4d1919fc6d0c40aa803e61dd1691fa28"}},"ea5565fea05a47abbd216a79b6b5c680":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_1acb1e92ff1b400f9b7544d69acc91c7","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 8580/0 [00:08&lt;00:00, 874.71 examples/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_63e84dad8b6244cd9d68fe32fa241563"}},"40cb3111217944eaa793e0ca2d45e0b7":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"4d1919fc6d0c40aa803e61dd1691fa28":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"1acb1e92ff1b400f9b7544d69acc91c7":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"63e84dad8b6244cd9d68fe32fa241563":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"301baee8330a47978ffa24c6609e33c8":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_0dbf094eb71f4133a70f89a2ed626d97","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_829a4d0dbd5e4bee8881fcf91d8b7d20","IPY_MODEL_88a4693cd8b94c0e96927b392fdb1746"]}},"0dbf094eb71f4133a70f89a2ed626d97":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"829a4d0dbd5e4bee8881fcf91d8b7d20":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_696f5affbe6c4d3aadcb8b6d9e0e3f66","_dom_classes":[],"description":" 91%","_model_name":"FloatProgressModel","bar_style":"danger","max":8580,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":7774,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_9cc30f2a17e3439b9790741c13a97996"}},"88a4693cd8b94c0e96927b392fdb1746":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_d790feedd38d4f3f8292c4d921a548e7","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 7774/8580 [00:00&lt;00:00, 23997.06 examples/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_1254b34afefd4a429b3867f475576de7"}},"696f5affbe6c4d3aadcb8b6d9e0e3f66":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"9cc30f2a17e3439b9790741c13a97996":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"d790feedd38d4f3f8292c4d921a548e7":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"1254b34afefd4a429b3867f475576de7":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}}}}},"cells":[{"cell_type":"markdown","metadata":{"id":"GO3NSeJkD40f"},"source":["# Image classification via fine-tuning with EfficientNet\n","\n","**Author:** [Yixing Fu](https://github.com/yixingfu)<br>\n","**Date created:** 2020/06/30<br>\n","**Last modified:** 2020/07/16<br>\n","**Description:** Use EfficientNet with weights pre-trained on imagenet for Stanford Dogs classification."]},{"cell_type":"markdown","metadata":{"id":"vCmaf1d8D40m"},"source":["## Introduction: what is EfficientNet\n","\n","EfficientNet, first introduced in [Tan and Le, 2019](https://arxiv.org/abs/1905.11946)\n","is among the most efficient models (i.e. requiring least FLOPS for inference)\n","that reaches State-of-the-Art accuracy on both\n","imagenet and common image classification transfer learning tasks.\n","\n","The smallest base model is similar to [MnasNet](https://arxiv.org/abs/1807.11626), which\n","reached near-SOTA with a significantly smaller model. By introducing a heuristic way to\n","scale the model, EfficientNet provides a family of models (B0 to B7) that represents a\n","good combination of efficiency and accuracy on a variety of scales. Such a scaling\n","heuristics (compound-scaling, details see\n","[Tan and Le, 2019](https://arxiv.org/abs/1905.11946)) allows the\n","efficiency-oriented base model (B0) to surpass models at every scale, while avoiding\n","extensive grid-search of hyperparameters.\n","\n","A summary of the latest updates on the model is available at\n","[here](https://github.com/tensorflow/tpu/tree/master/models/official/efficientnet), where various\n","augmentation schemes and semi-supervised learning approaches are applied to further\n","improve the imagenet performance of the models. These extensions of the model can be used\n","by updating weights without changing model architecture.\n","\n","## B0 to B7 variants of EfficientNet\n","\n","*(This section provides some details on \"compound scaling\", and can be skipped\n","if you're only interested in using the models)*\n","\n","Based on the [original paper](https://arxiv.org/abs/1905.11946) people may have the\n","impression that EfficientNet is a continuous family of models created by arbitrarily\n","choosing scaling factor in as Eq.(3) of the paper.  However, choice of resolution,\n","depth and width are also restricted by many factors:\n","\n","- Resolution: Resolutions not divisible by 8, 16, etc. cause zero-padding near boundaries\n","of some layers which wastes computational resources. This especially applies to smaller\n","variants of the model, hence the input resolution for B0 and B1 are chosen as 224 and\n","240.\n","\n","- Depth and width: The building blocks of EfficientNet demands channel size to be\n","multiples of 8.\n","\n","- Resource limit: Memory limitation may bottleneck resolution when depth\n","and width can still increase. In such a situation, increasing depth and/or\n","width but keep resolution can still improve performance.\n","\n","As a result, the depth, width and resolution of each variant of the EfficientNet models\n","are hand-picked and proven to produce good results, though they may be significantly\n","off from the compound scaling formula.\n","Therefore, the keras implementation (detailed below) only provide these 8 models, B0 to B7,\n","instead of allowing arbitray choice of width / depth / resolution parameters.\n","\n","## Keras implementation of EfficientNet\n","\n","An implementation of EfficientNet B0 to B7 has been shipped with tf.keras since TF2.3. To\n","use EfficientNetB0 for classifying 1000 classes of images from imagenet, run:\n","\n","```python\n","from tensorflow.keras.applications import EfficientNetB0\n","model = EfficientNetB0(weights='imagenet')\n","```\n","\n","This model takes input images of shape (224, 224, 3), and the input data should range\n","[0, 255]. Normalization is included as part of the model.\n","\n","Because training EfficientNet on ImageNet takes a tremendous amount of resources and\n","several techniques that are not a part of the model architecture itself. Hence the Keras\n","implementation by default loads pre-trained weights obtained via training with\n","[AutoAugment](https://arxiv.org/abs/1805.09501).\n","\n","For B0 to B7 base models, the input shapes are different. Here is a list of input shape\n","expected for each model:\n","\n","| Base model | resolution|\n","|----------------|-----|\n","| EfficientNetB0 | 224 |\n","| EfficientNetB1 | 240 |\n","| EfficientNetB2 | 260 |\n","| EfficientNetB3 | 300 |\n","| EfficientNetB4 | 380 |\n","| EfficientNetB5 | 456 |\n","| EfficientNetB6 | 528 |\n","| EfficientNetB7 | 600 |\n","\n","When the model is intended for transfer learning, the Keras implementation\n","provides a option to remove the top layers:\n","```\n","model = EfficientNetB0(include_top=False, weights='imagenet')\n","```\n","This option excludes the final `Dense` layer that turns 1280 features on the penultimate\n","layer into prediction of the 1000 ImageNet classes. Replacing the top layer with custom\n","layers allows using EfficientNet as a feature extractor in a transfer learning workflow.\n","\n","Another argument in the model constructor worth noticing is `drop_connect_rate` which controls\n","the dropout rate responsible for [stochastic depth](https://arxiv.org/abs/1603.09382).\n","This parameter serves as a toggle for extra regularization in finetuning, but does not\n","affect loaded weights. For example, when stronger regularization is desired, try:\n","\n","```python\n","model = EfficientNetB0(weights='imagenet', drop_connect_rate=0.4)\n","```\n","The default value is 0.2.\n","\n","## Example: EfficientNetB0 for Stanford Dogs.\n","\n","EfficientNet is capable of a wide range of image classification tasks.\n","This makes it a good model for transfer learning.\n","As an end-to-end example, we will show using pre-trained EfficientNetB0 on\n","[Stanford Dogs](http://vision.stanford.edu/aditya86/ImageNetDogs/main.html) dataset."]},{"cell_type":"code","metadata":{"id":"ZcuSKC1bAEC_"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Wa7ZQ0-gD40n"},"source":["# IMG_SIZE is determined by EfficientNet model choice\n","IMG_SIZE = 224"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"N12aLe3gD40o"},"source":["## Setup and data loading\n","\n","This example requires TensorFlow 2.3 or above.\n","\n","To use TPU, the TPU runtime must match current running TensorFlow\n","version. If there is a mismatch, try:\n","\n","```python\n","from cloud_tpu_client import Client\n","c = Client()\n","c.configure_tpu_version(tf.__version__, restart_type=\"always\")\n","```"]},{"cell_type":"code","metadata":{"id":"cjUyOF-KD40o","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1620017411789,"user_tz":420,"elapsed":7711,"user":{"displayName":"Lance N.","photoUrl":"","userId":"10641691903871358793"}},"outputId":"c5b7fdfe-acc2-4605-9665-e1657fca4a4d"},"source":["import tensorflow as tf\n","\n","try:\n","    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()  # TPU detection\n","    print(\"Running on TPU \", tpu.cluster_spec().as_dict()[\"worker\"])\n","    tf.config.experimental_connect_to_cluster(tpu)\n","    tf.tpu.experimental.initialize_tpu_system(tpu)\n","    strategy = tf.distribute.experimental.TPUStrategy(tpu)\n","except ValueError:\n","    print(\"Not connected to a TPU runtime. Using CPU/GPU strategy\")\n","    strategy = tf.distribute.MirroredStrategy()\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Not connected to a TPU runtime. Using CPU/GPU strategy\n","INFO:tensorflow:Using MirroredStrategy with devices ('/job:localhost/replica:0/task:0/device:GPU:0',)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"YNZYLTNnD40p"},"source":["### Loading data\n","\n","Here we load data from [tensorflow_datasets](https://www.tensorflow.org/datasets)\n","(hereafter TFDS).\n","Stanford Dogs dataset is provided in\n","TFDS as [stanford_dogs](https://www.tensorflow.org/datasets/catalog/stanford_dogs).\n","It features 20,580 images that belong to 120 classes of dog breeds\n","(12,000 for training and 8,580 for testing).\n","\n","By simply changing `dataset_name` below, you may also try this notebook for\n","other datasets in TFDS such as\n","[cifar10](https://www.tensorflow.org/datasets/catalog/cifar10),\n","[cifar100](https://www.tensorflow.org/datasets/catalog/cifar100),\n","[food101](https://www.tensorflow.org/datasets/catalog/food101),\n","etc. When the images are much smaller than the size of EfficientNet input,\n","we can simply upsample the input images. It has been shown in\n","[Tan and Le, 2019](https://arxiv.org/abs/1905.11946) that transfer learning\n","result is better for increased resolution even if input images remain small.\n","\n","For TPU: if using TFDS datasets,\n","a [GCS bucket](https://cloud.google.com/storage/docs/key-terms#buckets)\n","location is required to save the datasets. For example:\n","\n","```python\n","tfds.load(dataset_name, data_dir=\"gs://example-bucket/datapath\")\n","```\n","\n","Also, both the current environment and the TPU service account have\n","proper [access](https://cloud.google.com/tpu/docs/storage-buckets#authorize_the_service_account)\n","to the bucket. Alternatively, for small datasets you may try loading data\n","into the memory and use `tf.data.Dataset.from_tensor_slices()`."]},{"cell_type":"code","metadata":{"id":"drmkGzInD40q","colab":{"base_uri":"https://localhost:8080/","height":499,"referenced_widgets":["25f2e27bd07f4374bed853c20a40c4dc","93857bb3bbd240fa8c8874ac8f654fb0","7dad1c80902a470493a865b3aff5c568","2f48fe644f824e6f9b82b71966092a88","331d94b30d4245d99055a12beaa5e3ca","76354ec0ce4943c6817483a68f0f5c7d","3fb65370178942b1af36c57d8d879f41","7174114c1fda4942b1efa5d61fc09c18","040cbaaa15fd4461aa526a6571e471e7","4cc9d49906634000a0f2c949e6a80772","e0ef2440369d4e91ad73c305cea9c09e","22efdc0bbe00475fb632de281d1642ba","24f7108954174666adc0b54dcb445c3f","c84bd55df90d48f9a2c9418974f2cbed","121891a9fbbf4dbe9bc985b6e24387fe","a77f0edcb8354a8daaf1f800accdb388","9740dba8902d4f2ea74854f05fe53e2f","7522fab41b95497882afdc5252f69303","d121e65eca52400fadf9a2c4d19b44ce","c6008adbe21e49d7af8c1acfbca9239b","f7daa6cd7d094d069446d52ea80ea2ed","30a7045c41c54fa8ac47b4fc840fff6d","9fec2cdc28d54c36893ebf021945c199","bd747d9772c749db966eaf992d571e8c","b632e5fa834347af932c893448678ee7","9372e1cdd68845ba83ce511e6a235458","4783b90121a54f3898c2f3e7f457559a","5a74381be53d45ada9435dd56310f95a","0eb1163ed3d343bc9f1b3372a3e2bcf5","c4729bd7b66e4adcb737325baa0262b2","c9a9ca4f740d4c90b7910d5390ec9533","0dbea96a21e940378c66f62f04032e56","6af759901bf84cc2ae8aa458047eeacd","27abd7f271074e16ab8b0d857f59a425","52efe11421fb4653aeab2ce8a1b68940","1d89ef1665074429ae06fa1f885481ca","7e0b86fbc2ac400b8c8a93e92dc30d73","cc56007cc49e44f8b2550dafe57406af","2907ade19cee44ba9ac5748e1c002f9f","64f2b28bb1eb439cb6cb6956dacf6fc5","3f00263917ed4245ab2cae4fb857b2e7","c430f83776ec49528073d4a141ae412c","3e151b76862242b8bad72817823187a7","c3464f90f03b4886bb304008f36cbce8","aecc17a40181418c8b8fe833a30beba1","406f6d816d19402585384755395198f2","dab200d57a3a4175989effb20ed7a779","553e0418ef9849b09c9d79975defb1f3","0c6f0f53169646288bc7e81d6dcadeb3","9ca01046017e4269b9fb69aa85109475","84d3f22c97b6438fa9e5271d40bb511f","547d93c679414b3d8515b4a764c6d540","13ed8267239249a59cf4dbb4090ef739","2c9419f021df445f96117f51db5e4e68","4c913049bfd64f599e2abba354dec39f","6ec5d45176944eed89b317b534546bbf","867a9ec5bba64711bf838ff594d132e4","1c2b1f53ef484b8b9f53b27cb0fad49f","d00989a10d5f4172838060d91ffdfddd","ea5565fea05a47abbd216a79b6b5c680","40cb3111217944eaa793e0ca2d45e0b7","4d1919fc6d0c40aa803e61dd1691fa28","1acb1e92ff1b400f9b7544d69acc91c7","63e84dad8b6244cd9d68fe32fa241563","301baee8330a47978ffa24c6609e33c8","0dbf094eb71f4133a70f89a2ed626d97","829a4d0dbd5e4bee8881fcf91d8b7d20","88a4693cd8b94c0e96927b392fdb1746","696f5affbe6c4d3aadcb8b6d9e0e3f66","9cc30f2a17e3439b9790741c13a97996","d790feedd38d4f3f8292c4d921a548e7","1254b34afefd4a429b3867f475576de7"]},"executionInfo":{"status":"ok","timestamp":1620017509386,"user_tz":420,"elapsed":105299,"user":{"displayName":"Lance N.","photoUrl":"","userId":"10641691903871358793"}},"outputId":"18301bc4-14a9-4d3b-c155-6b25f25f17b9"},"source":["import tensorflow_datasets as tfds\n","\n","batch_size = 128\n","\n","dataset_name = \"stanford_dogs\"\n","(ds_train, ds_test), ds_info = tfds.load(\n","    dataset_name, split=[\"train\", \"test\"], with_info=True, as_supervised=True\n",")\n","NUM_CLASSES = ds_info.features[\"label\"].num_classes\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["\u001b[1mDownloading and preparing dataset stanford_dogs/0.2.0 (download: 778.12 MiB, generated: Unknown size, total: 778.12 MiB) to /root/tensorflow_datasets/stanford_dogs/0.2.0...\u001b[0m\n"],"name":"stdout"},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"25f2e27bd07f4374bed853c20a40c4dc","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=1.0, bar_style='info', description='Dl Completed...', max=1.0, style=Progre…"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"040cbaaa15fd4461aa526a6571e471e7","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=1.0, bar_style='info', description='Dl Size...', max=1.0, style=ProgressSty…"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n","\n","\n","\n"],"name":"stdout"},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"9740dba8902d4f2ea74854f05fe53e2f","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=1.0, bar_style='info', description='Dl Completed...', max=1.0, style=Progre…"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"b632e5fa834347af932c893448678ee7","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=1.0, bar_style='info', description='Dl Size...', max=1.0, style=ProgressSty…"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"6af759901bf84cc2ae8aa458047eeacd","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=1.0, bar_style='info', description='Extraction completed...', max=1.0, styl…"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n","\n","\n","\n","\n","\n"],"name":"stdout"},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"3f00263917ed4245ab2cae4fb857b2e7","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=1.0, bar_style='info', max=1.0), HTML(value='')))"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\rShuffling and writing examples to /root/tensorflow_datasets/stanford_dogs/0.2.0.incompletePEIKEL/stanford_dogs-train.tfrecord\n"],"name":"stdout"},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"0c6f0f53169646288bc7e81d6dcadeb3","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=0.0, max=12000.0), HTML(value='')))"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\r"],"name":"stdout"},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"867a9ec5bba64711bf838ff594d132e4","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=1.0, bar_style='info', max=1.0), HTML(value='')))"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\rShuffling and writing examples to /root/tensorflow_datasets/stanford_dogs/0.2.0.incompletePEIKEL/stanford_dogs-test.tfrecord\n"],"name":"stdout"},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"301baee8330a47978ffa24c6609e33c8","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=0.0, max=8580.0), HTML(value='')))"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\u001b[1mDataset stanford_dogs downloaded and prepared to /root/tensorflow_datasets/stanford_dogs/0.2.0. Subsequent calls will reuse this data.\u001b[0m\n","\r"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"AoG-GxFCD40q"},"source":["When the dataset include images with various size, we need to resize them into a\n","shared size. The Stanford Dogs dataset includes only images at least 200x200\n","pixels in size. Here we resize the images to the input size needed for EfficientNet."]},{"cell_type":"code","metadata":{"id":"zqei-KsBD40q"},"source":["size = (IMG_SIZE, IMG_SIZE)\n","ds_train = ds_train.map(lambda image, label: (tf.image.resize(image, size), label))\n","ds_test = ds_test.map(lambda image, label: (tf.image.resize(image, size), label))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"bsZVUV0RD40r"},"source":["### Visualizing the data\n","\n","The following code shows the first 9 images with their labels."]},{"cell_type":"code","metadata":{"id":"OJqK53xID40r","colab":{"base_uri":"https://localhost:8080/","height":264},"executionInfo":{"status":"ok","timestamp":1620017509388,"user_tz":420,"elapsed":105289,"user":{"displayName":"Lance N.","photoUrl":"","userId":"10641691903871358793"}},"outputId":"e2e92c00-f67a-4420-de3a-9786a7acabdc"},"source":["import matplotlib.pyplot as plt\n","\n","\n","def format_label(label):\n","    string_label = label_info.int2str(label)\n","    return string_label.split(\"-\")[1]\n","\n","\n","label_info = ds_info.features[\"label\"]\n","for i, (image, label) in enumerate(ds_train.take(9)):\n","    ax = plt.subplot(3, 3, i + 1)\n","    plt.imshow(image.numpy().astype(\"uint8\"))\n","    plt.title(\"{}\".format(format_label(label)))\n","    plt.axis(\"off\")\n"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 9 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"zrn0o9OjD40r"},"source":["### Data augmentation\n","\n","We can use preprocessing layers APIs for image augmentation."]},{"cell_type":"code","metadata":{"id":"H5nKn6P7D40s"},"source":["from tensorflow.keras.layers.experimental import preprocessing\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras import layers\n","\n","img_augmentation = Sequential(\n","    [\n","        preprocessing.RandomRotation(factor=0.15),\n","        preprocessing.RandomTranslation(height_factor=0.1, width_factor=0.1),\n","        preprocessing.RandomFlip(),\n","        preprocessing.RandomContrast(factor=0.1),\n","    ],\n","    name=\"img_augmentation\",\n",")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"xVQ3YIx2D40s"},"source":["This `Sequential` model object can be used both as a part of\n","the model we later build, and as a function to preprocess\n","data before feeding into the model. Using them as function makes\n","it easy to visualize the augmented images. Here we plot 9 examples\n","of augmentation result of a given figure."]},{"cell_type":"code","metadata":{"id":"mFvPH7T3D40s","colab":{"base_uri":"https://localhost:8080/","height":264},"executionInfo":{"status":"ok","timestamp":1620017511573,"user_tz":420,"elapsed":107463,"user":{"displayName":"Lance N.","photoUrl":"","userId":"10641691903871358793"}},"outputId":"3c81c786-a386-40d9-a03b-cceb8c0070eb"},"source":["for image, label in ds_train.take(1):\n","    for i in range(9):\n","        ax = plt.subplot(3, 3, i + 1)\n","        aug_img = img_augmentation(tf.expand_dims(image, axis=0))\n","        plt.imshow(aug_img[0].numpy().astype(\"uint8\"))\n","        plt.title(\"{}\".format(format_label(label)))\n","        plt.axis(\"off\")\n"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 9 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"d1XP6m5QD40t"},"source":["### Prepare inputs\n","\n","Once we verify the input data and augmentation are working correctly,\n","we prepare dataset for training. The input data are resized to uniform\n","`IMG_SIZE`. The labels are put into one-hot\n","(a.k.a. categorical) encoding. The dataset is batched.\n","\n","Note: `prefetch` and `AUTOTUNE` may in some situation improve\n","performance, but depends on environment and the specific dataset used.\n","See this [guide](https://www.tensorflow.org/guide/data_performance)\n","for more information on data pipeline performance."]},{"cell_type":"code","metadata":{"id":"Ps5wXAG_D40t"},"source":["# One-hot / categorical encoding\n","def input_preprocess(image, label):\n","    label = tf.one_hot(label, NUM_CLASSES)\n","    return image, label\n","\n","\n","ds_train = ds_train.map(\n","    input_preprocess, num_parallel_calls=tf.data.experimental.AUTOTUNE\n",")\n","ds_train = ds_train.batch(batch_size=batch_size, drop_remainder=True)\n","ds_train = ds_train.prefetch(tf.data.experimental.AUTOTUNE)\n","\n","ds_test = ds_test.map(input_preprocess)\n","ds_test = ds_test.batch(batch_size=batch_size//4, drop_remainder=True)\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"xJhkTvUIhBwz"},"source":["# Miniature EfficientNetB0 - A0\n","Create a half-sized version of the smallest EfficientNet."]},{"cell_type":"code","metadata":{"id":"lOxVyUw4hLCF"},"source":["# Copyright 2019 The TensorFlow Authors. All Rights Reserved.\n","#\n","# Licensed under the Apache License, Version 2.0 (the \"License\");\n","# you may not use this file except in compliance with the License.\n","# You may obtain a copy of the License at\n","#\n","#     http://www.apache.org/licenses/LICENSE-2.0\n","#\n","# Unless required by applicable law or agreed to in writing, software\n","# distributed under the License is distributed on an \"AS IS\" BASIS,\n","# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","# See the License for the specific language governing permissions and\n","# limitations under the License.\n","# ==============================================================================\n","# pylint: disable=invalid-name\n","# pylint: disable=missing-docstring\n","\"\"\"EfficientNet models for Keras.\n","Reference:\n","  - [EfficientNet: Rethinking Model Scaling for Convolutional Neural Networks](\n","      https://arxiv.org/abs/1905.11946) (ICML 2019)\n","\"\"\"\n","from __future__ import absolute_import\n","from __future__ import division\n","from __future__ import print_function\n","\n","import copy\n","import math\n","\n","from tensorflow.python.keras import backend\n","from tensorflow.python.keras.applications import imagenet_utils\n","from tensorflow.python.keras.engine import training\n","from tensorflow.python.keras.layers import VersionAwareLayers\n","from tensorflow.python.keras.utils import data_utils\n","from tensorflow.python.keras.utils import layer_utils\n","from tensorflow.python.lib.io import file_io\n","from tensorflow.python.util.tf_export import keras_export\n","\n","\n","BASE_WEIGHTS_PATH = 'https://storage.googleapis.com/keras-applications/'\n","\n","WEIGHTS_HASHES = {\n","    'b0': ('902e53a9f72be733fc0bcb005b3ebbac',\n","           '50bc09e76180e00e4465e1a485ddc09d'),\n","    'b1': ('1d254153d4ab51201f1646940f018540',\n","           '74c4e6b3e1f6a1eea24c589628592432'),\n","    'b2': ('b15cce36ff4dcbd00b6dd88e7857a6ad',\n","           '111f8e2ac8aa800a7a99e3239f7bfb39'),\n","    'b3': ('ffd1fdc53d0ce67064dc6a9c7960ede0',\n","           'af6d107764bb5b1abb91932881670226'),\n","    'b4': ('18c95ad55216b8f92d7e70b3a046e2fc',\n","           'ebc24e6d6c33eaebbd558eafbeedf1ba'),\n","    'b5': ('ace28f2a6363774853a83a0b21b9421a',\n","           '38879255a25d3c92d5e44e04ae6cec6f'),\n","    'b6': ('165f6e37dce68623721b423839de8be5',\n","           '9ecce42647a20130c1f39a5d4cb75743'),\n","    'b7': ('8c03f828fec3ef71311cd463b6759d99',\n","           'cbcfe4450ddf6f3ad90b1b398090fe4a'),\n","}\n","\n","\n","DEFAULT_BLOCKS_ARGS = [{\n","    'kernel_size': 3,\n","    'repeats': 1,\n","    'filters_in': 32,\n","    'filters_out': 16,\n","    'expand_ratio': 1,\n","    'id_skip': True,\n","    'strides': 1,\n","    'se_ratio': 0.25\n","}, {\n","    'kernel_size': 3,\n","    'repeats': 2,\n","    'filters_in': 16,\n","    'filters_out': 24,\n","    'expand_ratio': 6,\n","    'id_skip': True,\n","    'strides': 2,\n","    'se_ratio': 0.25\n","}, {\n","    'kernel_size': 5,\n","    'repeats': 2,\n","    'filters_in': 24,\n","    'filters_out': 40,\n","    'expand_ratio': 6,\n","    'id_skip': True,\n","    'strides': 2,\n","    'se_ratio': 0.25\n","}, {\n","    'kernel_size': 3,\n","    'repeats': 3,\n","    'filters_in': 40,\n","    'filters_out': 80,\n","    'expand_ratio': 6,\n","    'id_skip': True,\n","    'strides': 2,\n","    'se_ratio': 0.25\n","}, {\n","    'kernel_size': 5,\n","    'repeats': 3,\n","    'filters_in': 80,\n","    'filters_out': 112,\n","    'expand_ratio': 6,\n","    'id_skip': True,\n","    'strides': 1,\n","    'se_ratio': 0.25\n","}, {\n","    'kernel_size': 5,\n","    'repeats': 4,\n","    'filters_in': 112,\n","    'filters_out': 192,\n","    'expand_ratio': 6,\n","    'id_skip': True,\n","    'strides': 2,\n","    'se_ratio': 0.25\n","}, {\n","    'kernel_size': 3,\n","    'repeats': 1,\n","    'filters_in': 192,\n","    'filters_out': 320,\n","    'expand_ratio': 6,\n","    'id_skip': True,\n","    'strides': 1,\n","    'se_ratio': 0.25\n","}]\n","\n","CONV_KERNEL_INITIALIZER = {\n","    'class_name': 'VarianceScaling',\n","    'config': {\n","        'scale': 2.0,\n","        'mode': 'fan_out',\n","        'distribution': 'truncated_normal'\n","    }\n","}\n","\n","DENSE_KERNEL_INITIALIZER = {\n","    'class_name': 'VarianceScaling',\n","    'config': {\n","        'scale': 1. / 3.,\n","        'mode': 'fan_out',\n","        'distribution': 'uniform'\n","    }\n","}\n","\n","layers = VersionAwareLayers()\n","\n","BASE_DOCSTRING = \"\"\"Instantiates the {name} architecture.\n","  Reference:\n","  - [EfficientNet: Rethinking Model Scaling for Convolutional Neural Networks](\n","      https://arxiv.org/abs/1905.11946) (ICML 2019)\n","  Optionally loads weights pre-trained on ImageNet.\n","  Note that the data format convention used by the model is\n","  the one specified in your Keras config at `~/.keras/keras.json`.\n","  If you have never configured it, it defaults to `\"channels_last\"`.\n","  Arguments:\n","    include_top: Whether to include the fully-connected\n","        layer at the top of the network. Defaults to True.\n","    weights: One of `None` (random initialization),\n","          'imagenet' (pre-training on ImageNet),\n","          or the path to the weights file to be loaded. Defaults to 'imagenet'.\n","    input_tensor: Optional Keras tensor\n","        (i.e. output of `layers.Input()`)\n","        to use as image input for the model.\n","    input_shape: Optional shape tuple, only to be specified\n","        if `include_top` is False.\n","        It should have exactly 3 inputs channels.\n","    pooling: Optional pooling mode for feature extraction\n","        when `include_top` is `False`. Defaults to None.\n","        - `None` means that the output of the model will be\n","            the 4D tensor output of the\n","            last convolutional layer.\n","        - `avg` means that global average pooling\n","            will be applied to the output of the\n","            last convolutional layer, and thus\n","            the output of the model will be a 2D tensor.\n","        - `max` means that global max pooling will\n","            be applied.\n","    classes: Optional number of classes to classify images\n","        into, only to be specified if `include_top` is True, and\n","        if no `weights` argument is specified. Defaults to 1000 (number of\n","        ImageNet classes).\n","    classifier_activation: A `str` or callable. The activation function to use\n","        on the \"top\" layer. Ignored unless `include_top=True`. Set\n","        `classifier_activation=None` to return the logits of the \"top\" layer.\n","        Defaults to 'softmax'.\n","  Returns:\n","    A `keras.Model` instance.\n","\"\"\"\n","\n","\n","def EfficientNet(\n","    width_coefficient,\n","    depth_coefficient,\n","    default_size,\n","    dropout_rate=0.2,\n","    drop_connect_rate=0.2,\n","    depth_divisor=8,\n","    activation='swish',\n","    blocks_args='default',\n","    model_name='efficientnet',\n","    include_top=True,\n","    weights='imagenet',\n","    input_tensor=None,\n","    input_shape=None,\n","    pooling=None,\n","    classes=1000,\n","    classifier_activation='softmax'):\n","  \"\"\"Instantiates the EfficientNet architecture using given scaling coefficients.\n","  Reference:\n","  - [EfficientNet: Rethinking Model Scaling for Convolutional Neural Networks](\n","      https://arxiv.org/abs/1905.11946) (ICML 2019)\n","  Optionally loads weights pre-trained on ImageNet.\n","  Note that the data format convention used by the model is\n","  the one specified in your Keras config at `~/.keras/keras.json`.\n","  Arguments:\n","    width_coefficient: float, scaling coefficient for network width.\n","    depth_coefficient: float, scaling coefficient for network depth.\n","    default_size: integer, default input image size.\n","    dropout_rate: float, dropout rate before final classifier layer.\n","    drop_connect_rate: float, dropout rate at skip connections.\n","    depth_divisor: integer, a unit of network width.\n","    activation: activation function.\n","    blocks_args: list of dicts, parameters to construct block modules.\n","    model_name: string, model name.\n","    include_top: whether to include the fully-connected\n","        layer at the top of the network.\n","    weights: one of `None` (random initialization),\n","          'imagenet' (pre-training on ImageNet),\n","          or the path to the weights file to be loaded.\n","    input_tensor: optional Keras tensor\n","        (i.e. output of `layers.Input()`)\n","        to use as image input for the model.\n","    input_shape: optional shape tuple, only to be specified\n","        if `include_top` is False.\n","        It should have exactly 3 inputs channels.\n","    pooling: optional pooling mode for feature extraction\n","        when `include_top` is `False`.\n","        - `None` means that the output of the model will be\n","            the 4D tensor output of the\n","            last convolutional layer.\n","        - `avg` means that global average pooling\n","            will be applied to the output of the\n","            last convolutional layer, and thus\n","            the output of the model will be a 2D tensor.\n","        - `max` means that global max pooling will\n","            be applied.\n","    classes: optional number of classes to classify images\n","        into, only to be specified if `include_top` is True, and\n","        if no `weights` argument is specified.\n","    classifier_activation: A `str` or callable. The activation function to use\n","        on the \"top\" layer. Ignored unless `include_top=True`. Set\n","        `classifier_activation=None` to return the logits of the \"top\" layer.\n","  Returns:\n","    A `keras.Model` instance.\n","  Raises:\n","    ValueError: in case of invalid argument for `weights`,\n","      or invalid input shape.\n","    ValueError: if `classifier_activation` is not `softmax` or `None` when\n","      using a pretrained top layer.\n","  \"\"\"\n","  if blocks_args == 'default':\n","    blocks_args = DEFAULT_BLOCKS_ARGS\n","\n","  if not (weights in {'imagenet', None} or file_io.file_exists_v2(weights)):\n","    raise ValueError('The `weights` argument should be either '\n","                     '`None` (random initialization), `imagenet` '\n","                     '(pre-training on ImageNet), '\n","                     'or the path to the weights file to be loaded.')\n","\n","  if weights == 'imagenet' and include_top and classes != 1000:\n","    raise ValueError('If using `weights` as `\"imagenet\"` with `include_top`'\n","                     ' as true, `classes` should be 1000')\n","\n","  # Determine proper input shape\n","  input_shape = imagenet_utils.obtain_input_shape(\n","      input_shape,\n","      default_size=default_size,\n","      min_size=32,\n","      data_format=backend.image_data_format(),\n","      require_flatten=include_top,\n","      weights=weights)\n","\n","  if input_tensor is None:\n","    img_input = layers.Input(shape=input_shape)\n","  else:\n","    if not backend.is_keras_tensor(input_tensor):\n","      img_input = layers.Input(tensor=input_tensor, shape=input_shape)\n","    else:\n","      img_input = input_tensor\n","\n","  bn_axis = 3 if backend.image_data_format() == 'channels_last' else 1\n","\n","  def round_filters(filters, divisor=depth_divisor):\n","    \"\"\"Round number of filters based on depth multiplier.\"\"\"\n","    filters *= width_coefficient\n","    new_filters = max(divisor, int(filters + divisor / 2) // divisor * divisor)\n","    # Make sure that round down does not go down by more than 10%.\n","    if new_filters < 0.9 * filters:\n","      new_filters += divisor\n","    return int(new_filters)\n","\n","  def round_repeats(repeats):\n","    \"\"\"Round number of repeats based on depth multiplier.\"\"\"\n","    return int(math.ceil(depth_coefficient * repeats))\n","\n","  # Build stem\n","  x = img_input\n","  x = layers.Rescaling(1. / 255.)(x)\n","  x = layers.Normalization(axis=bn_axis)(x)\n","\n","  x = layers.ZeroPadding2D(\n","      padding=imagenet_utils.correct_pad(x, 3),\n","      name='stem_conv_pad')(x)\n","  x = layers.Conv2D(\n","      round_filters(blocks_args[0]['filters_in']),\n","      3,\n","      strides=2,\n","      padding='valid',\n","      use_bias=False,\n","      kernel_initializer=CONV_KERNEL_INITIALIZER,\n","      name='stem_conv')(x)\n","  x = layers.BatchNormalization(axis=bn_axis, name='stem_bn')(x)\n","  x = layers.Activation(activation, name='stem_activation')(x)\n","\n","  # Build blocks\n","  blocks_args = copy.deepcopy(blocks_args)\n","\n","  b = 0\n","  blocks = float(sum(round_repeats(args['repeats']) for args in blocks_args))\n","  for (i, args) in enumerate(blocks_args):\n","    assert args['repeats'] > 0\n","    # Update block input and output filters based on depth multiplier.\n","    args['filters_in'] = round_filters(args['filters_in'])\n","    args['filters_out'] = round_filters(args['filters_out'])\n","\n","    for j in range(round_repeats(args.pop('repeats'))):\n","      # The first block needs to take care of stride and filter size increase.\n","      if j > 0:\n","        args['strides'] = 1\n","        args['filters_in'] = args['filters_out']\n","      x = block(\n","          x,\n","          activation,\n","          drop_connect_rate * b / blocks,\n","          name='block{}{}_'.format(i + 1, chr(j + 97)),\n","          **args)\n","      b += 1\n","\n","  # Build top\n","  x = layers.Conv2D(\n","      round_filters(1280),\n","      1,\n","      padding='same',\n","      use_bias=False,\n","      kernel_initializer=CONV_KERNEL_INITIALIZER,\n","      name='top_conv')(x)\n","  x = layers.BatchNormalization(axis=bn_axis, name='top_bn')(x)\n","  x = layers.Activation(activation, name='top_activation')(x)\n","  if include_top:\n","    x = layers.GlobalAveragePooling2D(name='avg_pool')(x)\n","    if dropout_rate > 0:\n","      x = layers.Dropout(dropout_rate, name='top_dropout')(x)\n","    imagenet_utils.validate_activation(classifier_activation, weights)\n","    x = layers.Dense(\n","        classes,\n","        activation=classifier_activation,\n","        kernel_initializer=DENSE_KERNEL_INITIALIZER,\n","        name='predictions')(x)\n","  else:\n","    if pooling == 'avg':\n","      x = layers.GlobalAveragePooling2D(name='avg_pool')(x)\n","    elif pooling == 'max':\n","      x = layers.GlobalMaxPooling2D(name='max_pool')(x)\n","\n","  # Ensure that the model takes into account\n","  # any potential predecessors of `input_tensor`.\n","  if input_tensor is not None:\n","    inputs = layer_utils.get_source_inputs(input_tensor)\n","  else:\n","    inputs = img_input\n","\n","  # Create model.\n","  model = training.Model(inputs, x, name=model_name)\n","\n","  # Load weights.\n","  if weights == 'imagenet':\n","    if include_top:\n","      file_suffix = '.h5'\n","      file_hash = WEIGHTS_HASHES[model_name[-2:]][0]\n","    else:\n","      file_suffix = '_notop.h5'\n","      file_hash = WEIGHTS_HASHES[model_name[-2:]][1]\n","    file_name = model_name + file_suffix\n","    weights_path = data_utils.get_file(\n","        file_name,\n","        BASE_WEIGHTS_PATH + file_name,\n","        cache_subdir='models',\n","        file_hash=file_hash)\n","    model.load_weights(weights_path)\n","  elif weights is not None:\n","    model.load_weights(weights)\n","  return model\n","\n","\n","def block(inputs,\n","          activation='swish',\n","          drop_rate=0.,\n","          name='',\n","          filters_in=32,\n","          filters_out=16,\n","          kernel_size=3,\n","          strides=1,\n","          expand_ratio=1,\n","          se_ratio=0.,\n","          id_skip=True):\n","  \"\"\"An inverted residual block.\n","  Arguments:\n","      inputs: input tensor.\n","      activation: activation function.\n","      drop_rate: float between 0 and 1, fraction of the input units to drop.\n","      name: string, block label.\n","      filters_in: integer, the number of input filters.\n","      filters_out: integer, the number of output filters.\n","      kernel_size: integer, the dimension of the convolution window.\n","      strides: integer, the stride of the convolution.\n","      expand_ratio: integer, scaling coefficient for the input filters.\n","      se_ratio: float between 0 and 1, fraction to squeeze the input filters.\n","      id_skip: boolean.\n","  Returns:\n","      output tensor for the block.\n","  \"\"\"\n","  bn_axis = 3 if backend.image_data_format() == 'channels_last' else 1\n","\n","  # Expansion phase\n","  filters = filters_in * expand_ratio\n","  if expand_ratio != 1:\n","    x = layers.Conv2D(\n","        filters,\n","        1,\n","        padding='same',\n","        use_bias=False,\n","        kernel_initializer=CONV_KERNEL_INITIALIZER,\n","        name=name + 'expand_conv')(\n","            inputs)\n","    x = layers.BatchNormalization(axis=bn_axis, name=name + 'expand_bn')(x)\n","    x = layers.Activation(activation, name=name + 'expand_activation')(x)\n","  else:\n","    x = inputs\n","\n","  # Depthwise Convolution\n","  if strides == 2:\n","    x = layers.ZeroPadding2D(\n","        padding=imagenet_utils.correct_pad(x, kernel_size),\n","        name=name + 'dwconv_pad')(x)\n","    conv_pad = 'valid'\n","  else:\n","    conv_pad = 'same'\n","  x = layers.DepthwiseConv2D(\n","      kernel_size,\n","      strides=strides,\n","      padding=conv_pad,\n","      use_bias=False,\n","      depthwise_initializer=CONV_KERNEL_INITIALIZER,\n","      name=name + 'dwconv')(x)\n","  x = layers.BatchNormalization(axis=bn_axis, name=name + 'bn')(x)\n","  x = layers.Activation(activation, name=name + 'activation')(x)\n","\n","  # Squeeze and Excitation phase\n","  if 0 < se_ratio <= 1:\n","    filters_se = max(1, int(filters_in * se_ratio))\n","    se = layers.GlobalAveragePooling2D(name=name + 'se_squeeze')(x)\n","    se = layers.Reshape((1, 1, filters), name=name + 'se_reshape')(se)\n","    se = layers.Conv2D(\n","        filters_se,\n","        1,\n","        padding='same',\n","        activation=activation,\n","        kernel_initializer=CONV_KERNEL_INITIALIZER,\n","        name=name + 'se_reduce')(\n","            se)\n","    se = layers.Conv2D(\n","        filters,\n","        1,\n","        padding='same',\n","        activation='sigmoid',\n","        kernel_initializer=CONV_KERNEL_INITIALIZER,\n","        name=name + 'se_expand')(se)\n","    x = layers.multiply([x, se], name=name + 'se_excite')\n","\n","  # Output phase\n","  x = layers.Conv2D(\n","      filters_out,\n","      1,\n","      padding='same',\n","      use_bias=False,\n","      kernel_initializer=CONV_KERNEL_INITIALIZER,\n","      name=name + 'project_conv')(x)\n","  x = layers.BatchNormalization(axis=bn_axis, name=name + 'project_bn')(x)\n","  if id_skip and strides == 1 and filters_in == filters_out:\n","    if drop_rate > 0:\n","      x = layers.Dropout(\n","          drop_rate, noise_shape=(None, 1, 1, 1), name=name + 'drop')(x)\n","    x = layers.add([x, inputs], name=name + 'add')\n","  return x\n","\n","\n","\n","@keras_export('keras.applications.efficientnet.EfficientNetB0',\n","              'keras.applications.EfficientNetB0')\n","def EfficientNetA0(include_top=True,\n","                   weights='imagenet',\n","                   input_tensor=None,\n","                   input_shape=None,\n","                   pooling=None,\n","                   classes=1000,\n","                   classifier_activation='softmax',\n","                   dropout=0.2,\n","                   downsize=0.8,\n","                   **kwargs):\n","    blocks_args = copy.deepcopy(DEFAULT_BLOCKS_ARGS)\n","    for block in blocks_args:\n","        block['filters_in'] = int(block['filters_in'] * downsize)\n","        block['filters_out'] = int(block['filters_out'] * downsize)\n","    return EfficientNet(\n","      1.0,\n","      1.0,\n","      224,\n","      dropout,\n","      model_name='efficientneta0',\n","      include_top=include_top,\n","      weights=weights,\n","      input_tensor=input_tensor,\n","      input_shape=input_shape,\n","      pooling=pooling,\n","      classes=classes,\n","      classifier_activation=classifier_activation,\n","      blocks_args=blocks_args,\n","      **kwargs)\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"nwBrw2HyD40t"},"source":["## Training a model from scratch\n","\n","We build an EfficientNetB0 with 120 output classes, that is initialized from scratch:\n","\n","Note: the accuracy will increase very slowly and may overfit."]},{"cell_type":"code","metadata":{"id":"wqj6JGg7D40t","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1620029827770,"user_tz":420,"elapsed":2431656,"user":{"displayName":"Lance N.","photoUrl":"","userId":"10641691903871358793"}},"outputId":"1a7f6d20-0847-440e-c55c-54c59a67f64c"},"source":["from tensorflow.keras.applications import EfficientNetB0\n","\n","with strategy.scope():\n","    inputs = layers.Input(shape=(IMG_SIZE, IMG_SIZE, 3))\n","    x = img_augmentation(inputs)\n","    squished = EfficientNetA0(include_top=True, weights=None, classes=NUM_CLASSES, downsize=0.6)\n","    squished.summary()\n","    outputs = squished(x)\n","    \n","    model = tf.keras.Model(inputs, outputs)\n","    model.compile(\n","        optimizer=\"adam\", loss=\"categorical_crossentropy\", metrics=[\"accuracy\"]\n","    )\n","\n","model.summary()\n","\n","epochs = 100  # @param {type: \"slider\", min:1, max:100}\n","hist = model.fit(ds_train, epochs=epochs, validation_data=ds_test,\n","                 callbacks=[tf.keras.callbacks.EarlyStopping(patience=10)],\n","                 verbose=2)\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Model: \"efficientneta0\"\n","__________________________________________________________________________________________________\n","Layer (type)                    Output Shape         Param #     Connected to                     \n","==================================================================================================\n","input_17 (InputLayer)           [(None, 224, 224, 3) 0                                            \n","__________________________________________________________________________________________________\n","rescaling_7 (Rescaling)         (None, 224, 224, 3)  0           input_17[0][0]                   \n","__________________________________________________________________________________________________\n","normalization_7 (Normalization) (None, 224, 224, 3)  7           rescaling_7[0][0]                \n","__________________________________________________________________________________________________\n","stem_conv_pad (ZeroPadding2D)   (None, 225, 225, 3)  0           normalization_7[0][0]            \n","__________________________________________________________________________________________________\n","stem_conv (Conv2D)              (None, 112, 112, 24) 648         stem_conv_pad[0][0]              \n","__________________________________________________________________________________________________\n","stem_bn (BatchNormalization)    (None, 112, 112, 24) 96          stem_conv[0][0]                  \n","__________________________________________________________________________________________________\n","stem_activation (Activation)    (None, 112, 112, 24) 0           stem_bn[0][0]                    \n","__________________________________________________________________________________________________\n","block1a_dwconv (DepthwiseConv2D (None, 112, 112, 24) 216         stem_activation[0][0]            \n","__________________________________________________________________________________________________\n","block1a_bn (BatchNormalization) (None, 112, 112, 24) 96          block1a_dwconv[0][0]             \n","__________________________________________________________________________________________________\n","block1a_activation (Activation) (None, 112, 112, 24) 0           block1a_bn[0][0]                 \n","__________________________________________________________________________________________________\n","block1a_se_squeeze (GlobalAvera (None, 24)           0           block1a_activation[0][0]         \n","__________________________________________________________________________________________________\n","block1a_se_reshape (Reshape)    (None, 1, 1, 24)     0           block1a_se_squeeze[0][0]         \n","__________________________________________________________________________________________________\n","block1a_se_reduce (Conv2D)      (None, 1, 1, 6)      150         block1a_se_reshape[0][0]         \n","__________________________________________________________________________________________________\n","block1a_se_expand (Conv2D)      (None, 1, 1, 24)     168         block1a_se_reduce[0][0]          \n","__________________________________________________________________________________________________\n","block1a_se_excite (Multiply)    (None, 112, 112, 24) 0           block1a_activation[0][0]         \n","                                                                 block1a_se_expand[0][0]          \n","__________________________________________________________________________________________________\n","block1a_project_conv (Conv2D)   (None, 112, 112, 16) 384         block1a_se_excite[0][0]          \n","__________________________________________________________________________________________________\n","block1a_project_bn (BatchNormal (None, 112, 112, 16) 64          block1a_project_conv[0][0]       \n","__________________________________________________________________________________________________\n","block2a_expand_conv (Conv2D)    (None, 112, 112, 96) 1536        block1a_project_bn[0][0]         \n","__________________________________________________________________________________________________\n","block2a_expand_bn (BatchNormali (None, 112, 112, 96) 384         block2a_expand_conv[0][0]        \n","__________________________________________________________________________________________________\n","block2a_expand_activation (Acti (None, 112, 112, 96) 0           block2a_expand_bn[0][0]          \n","__________________________________________________________________________________________________\n","block2a_dwconv_pad (ZeroPadding (None, 113, 113, 96) 0           block2a_expand_activation[0][0]  \n","__________________________________________________________________________________________________\n","block2a_dwconv (DepthwiseConv2D (None, 56, 56, 96)   864         block2a_dwconv_pad[0][0]         \n","__________________________________________________________________________________________________\n","block2a_bn (BatchNormalization) (None, 56, 56, 96)   384         block2a_dwconv[0][0]             \n","__________________________________________________________________________________________________\n","block2a_activation (Activation) (None, 56, 56, 96)   0           block2a_bn[0][0]                 \n","__________________________________________________________________________________________________\n","block2a_se_squeeze (GlobalAvera (None, 96)           0           block2a_activation[0][0]         \n","__________________________________________________________________________________________________\n","block2a_se_reshape (Reshape)    (None, 1, 1, 96)     0           block2a_se_squeeze[0][0]         \n","__________________________________________________________________________________________________\n","block2a_se_reduce (Conv2D)      (None, 1, 1, 4)      388         block2a_se_reshape[0][0]         \n","__________________________________________________________________________________________________\n","block2a_se_expand (Conv2D)      (None, 1, 1, 96)     480         block2a_se_reduce[0][0]          \n","__________________________________________________________________________________________________\n","block2a_se_excite (Multiply)    (None, 56, 56, 96)   0           block2a_activation[0][0]         \n","                                                                 block2a_se_expand[0][0]          \n","__________________________________________________________________________________________________\n","block2a_project_conv (Conv2D)   (None, 56, 56, 16)   1536        block2a_se_excite[0][0]          \n","__________________________________________________________________________________________________\n","block2a_project_bn (BatchNormal (None, 56, 56, 16)   64          block2a_project_conv[0][0]       \n","__________________________________________________________________________________________________\n","block2b_expand_conv (Conv2D)    (None, 56, 56, 96)   1536        block2a_project_bn[0][0]         \n","__________________________________________________________________________________________________\n","block2b_expand_bn (BatchNormali (None, 56, 56, 96)   384         block2b_expand_conv[0][0]        \n","__________________________________________________________________________________________________\n","block2b_expand_activation (Acti (None, 56, 56, 96)   0           block2b_expand_bn[0][0]          \n","__________________________________________________________________________________________________\n","block2b_dwconv (DepthwiseConv2D (None, 56, 56, 96)   864         block2b_expand_activation[0][0]  \n","__________________________________________________________________________________________________\n","block2b_bn (BatchNormalization) (None, 56, 56, 96)   384         block2b_dwconv[0][0]             \n","__________________________________________________________________________________________________\n","block2b_activation (Activation) (None, 56, 56, 96)   0           block2b_bn[0][0]                 \n","__________________________________________________________________________________________________\n","block2b_se_squeeze (GlobalAvera (None, 96)           0           block2b_activation[0][0]         \n","__________________________________________________________________________________________________\n","block2b_se_reshape (Reshape)    (None, 1, 1, 96)     0           block2b_se_squeeze[0][0]         \n","__________________________________________________________________________________________________\n","block2b_se_reduce (Conv2D)      (None, 1, 1, 4)      388         block2b_se_reshape[0][0]         \n","__________________________________________________________________________________________________\n","block2b_se_expand (Conv2D)      (None, 1, 1, 96)     480         block2b_se_reduce[0][0]          \n","__________________________________________________________________________________________________\n","block2b_se_excite (Multiply)    (None, 56, 56, 96)   0           block2b_activation[0][0]         \n","                                                                 block2b_se_expand[0][0]          \n","__________________________________________________________________________________________________\n","block2b_project_conv (Conv2D)   (None, 56, 56, 16)   1536        block2b_se_excite[0][0]          \n","__________________________________________________________________________________________________\n","block2b_project_bn (BatchNormal (None, 56, 56, 16)   64          block2b_project_conv[0][0]       \n","__________________________________________________________________________________________________\n","block2b_drop (Dropout)          (None, 56, 56, 16)   0           block2b_project_bn[0][0]         \n","__________________________________________________________________________________________________\n","block2b_add (Add)               (None, 56, 56, 16)   0           block2b_drop[0][0]               \n","                                                                 block2a_project_bn[0][0]         \n","__________________________________________________________________________________________________\n","block3a_expand_conv (Conv2D)    (None, 56, 56, 96)   1536        block2b_add[0][0]                \n","__________________________________________________________________________________________________\n","block3a_expand_bn (BatchNormali (None, 56, 56, 96)   384         block3a_expand_conv[0][0]        \n","__________________________________________________________________________________________________\n","block3a_expand_activation (Acti (None, 56, 56, 96)   0           block3a_expand_bn[0][0]          \n","__________________________________________________________________________________________________\n","block3a_dwconv_pad (ZeroPadding (None, 59, 59, 96)   0           block3a_expand_activation[0][0]  \n","__________________________________________________________________________________________________\n","block3a_dwconv (DepthwiseConv2D (None, 28, 28, 96)   2400        block3a_dwconv_pad[0][0]         \n","__________________________________________________________________________________________________\n","block3a_bn (BatchNormalization) (None, 28, 28, 96)   384         block3a_dwconv[0][0]             \n","__________________________________________________________________________________________________\n","block3a_activation (Activation) (None, 28, 28, 96)   0           block3a_bn[0][0]                 \n","__________________________________________________________________________________________________\n","block3a_se_squeeze (GlobalAvera (None, 96)           0           block3a_activation[0][0]         \n","__________________________________________________________________________________________________\n","block3a_se_reshape (Reshape)    (None, 1, 1, 96)     0           block3a_se_squeeze[0][0]         \n","__________________________________________________________________________________________________\n","block3a_se_reduce (Conv2D)      (None, 1, 1, 4)      388         block3a_se_reshape[0][0]         \n","__________________________________________________________________________________________________\n","block3a_se_expand (Conv2D)      (None, 1, 1, 96)     480         block3a_se_reduce[0][0]          \n","__________________________________________________________________________________________________\n","block3a_se_excite (Multiply)    (None, 28, 28, 96)   0           block3a_activation[0][0]         \n","                                                                 block3a_se_expand[0][0]          \n","__________________________________________________________________________________________________\n","block3a_project_conv (Conv2D)   (None, 28, 28, 24)   2304        block3a_se_excite[0][0]          \n","__________________________________________________________________________________________________\n","block3a_project_bn (BatchNormal (None, 28, 28, 24)   96          block3a_project_conv[0][0]       \n","__________________________________________________________________________________________________\n","block3b_expand_conv (Conv2D)    (None, 28, 28, 144)  3456        block3a_project_bn[0][0]         \n","__________________________________________________________________________________________________\n","block3b_expand_bn (BatchNormali (None, 28, 28, 144)  576         block3b_expand_conv[0][0]        \n","__________________________________________________________________________________________________\n","block3b_expand_activation (Acti (None, 28, 28, 144)  0           block3b_expand_bn[0][0]          \n","__________________________________________________________________________________________________\n","block3b_dwconv (DepthwiseConv2D (None, 28, 28, 144)  3600        block3b_expand_activation[0][0]  \n","__________________________________________________________________________________________________\n","block3b_bn (BatchNormalization) (None, 28, 28, 144)  576         block3b_dwconv[0][0]             \n","__________________________________________________________________________________________________\n","block3b_activation (Activation) (None, 28, 28, 144)  0           block3b_bn[0][0]                 \n","__________________________________________________________________________________________________\n","block3b_se_squeeze (GlobalAvera (None, 144)          0           block3b_activation[0][0]         \n","__________________________________________________________________________________________________\n","block3b_se_reshape (Reshape)    (None, 1, 1, 144)    0           block3b_se_squeeze[0][0]         \n","__________________________________________________________________________________________________\n","block3b_se_reduce (Conv2D)      (None, 1, 1, 6)      870         block3b_se_reshape[0][0]         \n","__________________________________________________________________________________________________\n","block3b_se_expand (Conv2D)      (None, 1, 1, 144)    1008        block3b_se_reduce[0][0]          \n","__________________________________________________________________________________________________\n","block3b_se_excite (Multiply)    (None, 28, 28, 144)  0           block3b_activation[0][0]         \n","                                                                 block3b_se_expand[0][0]          \n","__________________________________________________________________________________________________\n","block3b_project_conv (Conv2D)   (None, 28, 28, 24)   3456        block3b_se_excite[0][0]          \n","__________________________________________________________________________________________________\n","block3b_project_bn (BatchNormal (None, 28, 28, 24)   96          block3b_project_conv[0][0]       \n","__________________________________________________________________________________________________\n","block3b_drop (Dropout)          (None, 28, 28, 24)   0           block3b_project_bn[0][0]         \n","__________________________________________________________________________________________________\n","block3b_add (Add)               (None, 28, 28, 24)   0           block3b_drop[0][0]               \n","                                                                 block3a_project_bn[0][0]         \n","__________________________________________________________________________________________________\n","block4a_expand_conv (Conv2D)    (None, 28, 28, 144)  3456        block3b_add[0][0]                \n","__________________________________________________________________________________________________\n","block4a_expand_bn (BatchNormali (None, 28, 28, 144)  576         block4a_expand_conv[0][0]        \n","__________________________________________________________________________________________________\n","block4a_expand_activation (Acti (None, 28, 28, 144)  0           block4a_expand_bn[0][0]          \n","__________________________________________________________________________________________________\n","block4a_dwconv_pad (ZeroPadding (None, 29, 29, 144)  0           block4a_expand_activation[0][0]  \n","__________________________________________________________________________________________________\n","block4a_dwconv (DepthwiseConv2D (None, 14, 14, 144)  1296        block4a_dwconv_pad[0][0]         \n","__________________________________________________________________________________________________\n","block4a_bn (BatchNormalization) (None, 14, 14, 144)  576         block4a_dwconv[0][0]             \n","__________________________________________________________________________________________________\n","block4a_activation (Activation) (None, 14, 14, 144)  0           block4a_bn[0][0]                 \n","__________________________________________________________________________________________________\n","block4a_se_squeeze (GlobalAvera (None, 144)          0           block4a_activation[0][0]         \n","__________________________________________________________________________________________________\n","block4a_se_reshape (Reshape)    (None, 1, 1, 144)    0           block4a_se_squeeze[0][0]         \n","__________________________________________________________________________________________________\n","block4a_se_reduce (Conv2D)      (None, 1, 1, 6)      870         block4a_se_reshape[0][0]         \n","__________________________________________________________________________________________________\n","block4a_se_expand (Conv2D)      (None, 1, 1, 144)    1008        block4a_se_reduce[0][0]          \n","__________________________________________________________________________________________________\n","block4a_se_excite (Multiply)    (None, 14, 14, 144)  0           block4a_activation[0][0]         \n","                                                                 block4a_se_expand[0][0]          \n","__________________________________________________________________________________________________\n","block4a_project_conv (Conv2D)   (None, 14, 14, 48)   6912        block4a_se_excite[0][0]          \n","__________________________________________________________________________________________________\n","block4a_project_bn (BatchNormal (None, 14, 14, 48)   192         block4a_project_conv[0][0]       \n","__________________________________________________________________________________________________\n","block4b_expand_conv (Conv2D)    (None, 14, 14, 288)  13824       block4a_project_bn[0][0]         \n","__________________________________________________________________________________________________\n","block4b_expand_bn (BatchNormali (None, 14, 14, 288)  1152        block4b_expand_conv[0][0]        \n","__________________________________________________________________________________________________\n","block4b_expand_activation (Acti (None, 14, 14, 288)  0           block4b_expand_bn[0][0]          \n","__________________________________________________________________________________________________\n","block4b_dwconv (DepthwiseConv2D (None, 14, 14, 288)  2592        block4b_expand_activation[0][0]  \n","__________________________________________________________________________________________________\n","block4b_bn (BatchNormalization) (None, 14, 14, 288)  1152        block4b_dwconv[0][0]             \n","__________________________________________________________________________________________________\n","block4b_activation (Activation) (None, 14, 14, 288)  0           block4b_bn[0][0]                 \n","__________________________________________________________________________________________________\n","block4b_se_squeeze (GlobalAvera (None, 288)          0           block4b_activation[0][0]         \n","__________________________________________________________________________________________________\n","block4b_se_reshape (Reshape)    (None, 1, 1, 288)    0           block4b_se_squeeze[0][0]         \n","__________________________________________________________________________________________________\n","block4b_se_reduce (Conv2D)      (None, 1, 1, 12)     3468        block4b_se_reshape[0][0]         \n","__________________________________________________________________________________________________\n","block4b_se_expand (Conv2D)      (None, 1, 1, 288)    3744        block4b_se_reduce[0][0]          \n","__________________________________________________________________________________________________\n","block4b_se_excite (Multiply)    (None, 14, 14, 288)  0           block4b_activation[0][0]         \n","                                                                 block4b_se_expand[0][0]          \n","__________________________________________________________________________________________________\n","block4b_project_conv (Conv2D)   (None, 14, 14, 48)   13824       block4b_se_excite[0][0]          \n","__________________________________________________________________________________________________\n","block4b_project_bn (BatchNormal (None, 14, 14, 48)   192         block4b_project_conv[0][0]       \n","__________________________________________________________________________________________________\n","block4b_drop (Dropout)          (None, 14, 14, 48)   0           block4b_project_bn[0][0]         \n","__________________________________________________________________________________________________\n","block4b_add (Add)               (None, 14, 14, 48)   0           block4b_drop[0][0]               \n","                                                                 block4a_project_bn[0][0]         \n","__________________________________________________________________________________________________\n","block4c_expand_conv (Conv2D)    (None, 14, 14, 288)  13824       block4b_add[0][0]                \n","__________________________________________________________________________________________________\n","block4c_expand_bn (BatchNormali (None, 14, 14, 288)  1152        block4c_expand_conv[0][0]        \n","__________________________________________________________________________________________________\n","block4c_expand_activation (Acti (None, 14, 14, 288)  0           block4c_expand_bn[0][0]          \n","__________________________________________________________________________________________________\n","block4c_dwconv (DepthwiseConv2D (None, 14, 14, 288)  2592        block4c_expand_activation[0][0]  \n","__________________________________________________________________________________________________\n","block4c_bn (BatchNormalization) (None, 14, 14, 288)  1152        block4c_dwconv[0][0]             \n","__________________________________________________________________________________________________\n","block4c_activation (Activation) (None, 14, 14, 288)  0           block4c_bn[0][0]                 \n","__________________________________________________________________________________________________\n","block4c_se_squeeze (GlobalAvera (None, 288)          0           block4c_activation[0][0]         \n","__________________________________________________________________________________________________\n","block4c_se_reshape (Reshape)    (None, 1, 1, 288)    0           block4c_se_squeeze[0][0]         \n","__________________________________________________________________________________________________\n","block4c_se_reduce (Conv2D)      (None, 1, 1, 12)     3468        block4c_se_reshape[0][0]         \n","__________________________________________________________________________________________________\n","block4c_se_expand (Conv2D)      (None, 1, 1, 288)    3744        block4c_se_reduce[0][0]          \n","__________________________________________________________________________________________________\n","block4c_se_excite (Multiply)    (None, 14, 14, 288)  0           block4c_activation[0][0]         \n","                                                                 block4c_se_expand[0][0]          \n","__________________________________________________________________________________________________\n","block4c_project_conv (Conv2D)   (None, 14, 14, 48)   13824       block4c_se_excite[0][0]          \n","__________________________________________________________________________________________________\n","block4c_project_bn (BatchNormal (None, 14, 14, 48)   192         block4c_project_conv[0][0]       \n","__________________________________________________________________________________________________\n","block4c_drop (Dropout)          (None, 14, 14, 48)   0           block4c_project_bn[0][0]         \n","__________________________________________________________________________________________________\n","block4c_add (Add)               (None, 14, 14, 48)   0           block4c_drop[0][0]               \n","                                                                 block4b_add[0][0]                \n","__________________________________________________________________________________________________\n","block5a_expand_conv (Conv2D)    (None, 14, 14, 288)  13824       block4c_add[0][0]                \n","__________________________________________________________________________________________________\n","block5a_expand_bn (BatchNormali (None, 14, 14, 288)  1152        block5a_expand_conv[0][0]        \n","__________________________________________________________________________________________________\n","block5a_expand_activation (Acti (None, 14, 14, 288)  0           block5a_expand_bn[0][0]          \n","__________________________________________________________________________________________________\n","block5a_dwconv (DepthwiseConv2D (None, 14, 14, 288)  7200        block5a_expand_activation[0][0]  \n","__________________________________________________________________________________________________\n","block5a_bn (BatchNormalization) (None, 14, 14, 288)  1152        block5a_dwconv[0][0]             \n","__________________________________________________________________________________________________\n","block5a_activation (Activation) (None, 14, 14, 288)  0           block5a_bn[0][0]                 \n","__________________________________________________________________________________________________\n","block5a_se_squeeze (GlobalAvera (None, 288)          0           block5a_activation[0][0]         \n","__________________________________________________________________________________________________\n","block5a_se_reshape (Reshape)    (None, 1, 1, 288)    0           block5a_se_squeeze[0][0]         \n","__________________________________________________________________________________________________\n","block5a_se_reduce (Conv2D)      (None, 1, 1, 12)     3468        block5a_se_reshape[0][0]         \n","__________________________________________________________________________________________________\n","block5a_se_expand (Conv2D)      (None, 1, 1, 288)    3744        block5a_se_reduce[0][0]          \n","__________________________________________________________________________________________________\n","block5a_se_excite (Multiply)    (None, 14, 14, 288)  0           block5a_activation[0][0]         \n","                                                                 block5a_se_expand[0][0]          \n","__________________________________________________________________________________________________\n","block5a_project_conv (Conv2D)   (None, 14, 14, 64)   18432       block5a_se_excite[0][0]          \n","__________________________________________________________________________________________________\n","block5a_project_bn (BatchNormal (None, 14, 14, 64)   256         block5a_project_conv[0][0]       \n","__________________________________________________________________________________________________\n","block5b_expand_conv (Conv2D)    (None, 14, 14, 384)  24576       block5a_project_bn[0][0]         \n","__________________________________________________________________________________________________\n","block5b_expand_bn (BatchNormali (None, 14, 14, 384)  1536        block5b_expand_conv[0][0]        \n","__________________________________________________________________________________________________\n","block5b_expand_activation (Acti (None, 14, 14, 384)  0           block5b_expand_bn[0][0]          \n","__________________________________________________________________________________________________\n","block5b_dwconv (DepthwiseConv2D (None, 14, 14, 384)  9600        block5b_expand_activation[0][0]  \n","__________________________________________________________________________________________________\n","block5b_bn (BatchNormalization) (None, 14, 14, 384)  1536        block5b_dwconv[0][0]             \n","__________________________________________________________________________________________________\n","block5b_activation (Activation) (None, 14, 14, 384)  0           block5b_bn[0][0]                 \n","__________________________________________________________________________________________________\n","block5b_se_squeeze (GlobalAvera (None, 384)          0           block5b_activation[0][0]         \n","__________________________________________________________________________________________________\n","block5b_se_reshape (Reshape)    (None, 1, 1, 384)    0           block5b_se_squeeze[0][0]         \n","__________________________________________________________________________________________________\n","block5b_se_reduce (Conv2D)      (None, 1, 1, 16)     6160        block5b_se_reshape[0][0]         \n","__________________________________________________________________________________________________\n","block5b_se_expand (Conv2D)      (None, 1, 1, 384)    6528        block5b_se_reduce[0][0]          \n","__________________________________________________________________________________________________\n","block5b_se_excite (Multiply)    (None, 14, 14, 384)  0           block5b_activation[0][0]         \n","                                                                 block5b_se_expand[0][0]          \n","__________________________________________________________________________________________________\n","block5b_project_conv (Conv2D)   (None, 14, 14, 64)   24576       block5b_se_excite[0][0]          \n","__________________________________________________________________________________________________\n","block5b_project_bn (BatchNormal (None, 14, 14, 64)   256         block5b_project_conv[0][0]       \n","__________________________________________________________________________________________________\n","block5b_drop (Dropout)          (None, 14, 14, 64)   0           block5b_project_bn[0][0]         \n","__________________________________________________________________________________________________\n","block5b_add (Add)               (None, 14, 14, 64)   0           block5b_drop[0][0]               \n","                                                                 block5a_project_bn[0][0]         \n","__________________________________________________________________________________________________\n","block5c_expand_conv (Conv2D)    (None, 14, 14, 384)  24576       block5b_add[0][0]                \n","__________________________________________________________________________________________________\n","block5c_expand_bn (BatchNormali (None, 14, 14, 384)  1536        block5c_expand_conv[0][0]        \n","__________________________________________________________________________________________________\n","block5c_expand_activation (Acti (None, 14, 14, 384)  0           block5c_expand_bn[0][0]          \n","__________________________________________________________________________________________________\n","block5c_dwconv (DepthwiseConv2D (None, 14, 14, 384)  9600        block5c_expand_activation[0][0]  \n","__________________________________________________________________________________________________\n","block5c_bn (BatchNormalization) (None, 14, 14, 384)  1536        block5c_dwconv[0][0]             \n","__________________________________________________________________________________________________\n","block5c_activation (Activation) (None, 14, 14, 384)  0           block5c_bn[0][0]                 \n","__________________________________________________________________________________________________\n","block5c_se_squeeze (GlobalAvera (None, 384)          0           block5c_activation[0][0]         \n","__________________________________________________________________________________________________\n","block5c_se_reshape (Reshape)    (None, 1, 1, 384)    0           block5c_se_squeeze[0][0]         \n","__________________________________________________________________________________________________\n","block5c_se_reduce (Conv2D)      (None, 1, 1, 16)     6160        block5c_se_reshape[0][0]         \n","__________________________________________________________________________________________________\n","block5c_se_expand (Conv2D)      (None, 1, 1, 384)    6528        block5c_se_reduce[0][0]          \n","__________________________________________________________________________________________________\n","block5c_se_excite (Multiply)    (None, 14, 14, 384)  0           block5c_activation[0][0]         \n","                                                                 block5c_se_expand[0][0]          \n","__________________________________________________________________________________________________\n","block5c_project_conv (Conv2D)   (None, 14, 14, 64)   24576       block5c_se_excite[0][0]          \n","__________________________________________________________________________________________________\n","block5c_project_bn (BatchNormal (None, 14, 14, 64)   256         block5c_project_conv[0][0]       \n","__________________________________________________________________________________________________\n","block5c_drop (Dropout)          (None, 14, 14, 64)   0           block5c_project_bn[0][0]         \n","__________________________________________________________________________________________________\n","block5c_add (Add)               (None, 14, 14, 64)   0           block5c_drop[0][0]               \n","                                                                 block5b_add[0][0]                \n","__________________________________________________________________________________________________\n","block6a_expand_conv (Conv2D)    (None, 14, 14, 384)  24576       block5c_add[0][0]                \n","__________________________________________________________________________________________________\n","block6a_expand_bn (BatchNormali (None, 14, 14, 384)  1536        block6a_expand_conv[0][0]        \n","__________________________________________________________________________________________________\n","block6a_expand_activation (Acti (None, 14, 14, 384)  0           block6a_expand_bn[0][0]          \n","__________________________________________________________________________________________________\n","block6a_dwconv_pad (ZeroPadding (None, 17, 17, 384)  0           block6a_expand_activation[0][0]  \n","__________________________________________________________________________________________________\n","block6a_dwconv (DepthwiseConv2D (None, 7, 7, 384)    9600        block6a_dwconv_pad[0][0]         \n","__________________________________________________________________________________________________\n","block6a_bn (BatchNormalization) (None, 7, 7, 384)    1536        block6a_dwconv[0][0]             \n","__________________________________________________________________________________________________\n","block6a_activation (Activation) (None, 7, 7, 384)    0           block6a_bn[0][0]                 \n","__________________________________________________________________________________________________\n","block6a_se_squeeze (GlobalAvera (None, 384)          0           block6a_activation[0][0]         \n","__________________________________________________________________________________________________\n","block6a_se_reshape (Reshape)    (None, 1, 1, 384)    0           block6a_se_squeeze[0][0]         \n","__________________________________________________________________________________________________\n","block6a_se_reduce (Conv2D)      (None, 1, 1, 16)     6160        block6a_se_reshape[0][0]         \n","__________________________________________________________________________________________________\n","block6a_se_expand (Conv2D)      (None, 1, 1, 384)    6528        block6a_se_reduce[0][0]          \n","__________________________________________________________________________________________________\n","block6a_se_excite (Multiply)    (None, 7, 7, 384)    0           block6a_activation[0][0]         \n","                                                                 block6a_se_expand[0][0]          \n","__________________________________________________________________________________________________\n","block6a_project_conv (Conv2D)   (None, 7, 7, 112)    43008       block6a_se_excite[0][0]          \n","__________________________________________________________________________________________________\n","block6a_project_bn (BatchNormal (None, 7, 7, 112)    448         block6a_project_conv[0][0]       \n","__________________________________________________________________________________________________\n","block6b_expand_conv (Conv2D)    (None, 7, 7, 672)    75264       block6a_project_bn[0][0]         \n","__________________________________________________________________________________________________\n","block6b_expand_bn (BatchNormali (None, 7, 7, 672)    2688        block6b_expand_conv[0][0]        \n","__________________________________________________________________________________________________\n","block6b_expand_activation (Acti (None, 7, 7, 672)    0           block6b_expand_bn[0][0]          \n","__________________________________________________________________________________________________\n","block6b_dwconv (DepthwiseConv2D (None, 7, 7, 672)    16800       block6b_expand_activation[0][0]  \n","__________________________________________________________________________________________________\n","block6b_bn (BatchNormalization) (None, 7, 7, 672)    2688        block6b_dwconv[0][0]             \n","__________________________________________________________________________________________________\n","block6b_activation (Activation) (None, 7, 7, 672)    0           block6b_bn[0][0]                 \n","__________________________________________________________________________________________________\n","block6b_se_squeeze (GlobalAvera (None, 672)          0           block6b_activation[0][0]         \n","__________________________________________________________________________________________________\n","block6b_se_reshape (Reshape)    (None, 1, 1, 672)    0           block6b_se_squeeze[0][0]         \n","__________________________________________________________________________________________________\n","block6b_se_reduce (Conv2D)      (None, 1, 1, 28)     18844       block6b_se_reshape[0][0]         \n","__________________________________________________________________________________________________\n","block6b_se_expand (Conv2D)      (None, 1, 1, 672)    19488       block6b_se_reduce[0][0]          \n","__________________________________________________________________________________________________\n","block6b_se_excite (Multiply)    (None, 7, 7, 672)    0           block6b_activation[0][0]         \n","                                                                 block6b_se_expand[0][0]          \n","__________________________________________________________________________________________________\n","block6b_project_conv (Conv2D)   (None, 7, 7, 112)    75264       block6b_se_excite[0][0]          \n","__________________________________________________________________________________________________\n","block6b_project_bn (BatchNormal (None, 7, 7, 112)    448         block6b_project_conv[0][0]       \n","__________________________________________________________________________________________________\n","block6b_drop (Dropout)          (None, 7, 7, 112)    0           block6b_project_bn[0][0]         \n","__________________________________________________________________________________________________\n","block6b_add (Add)               (None, 7, 7, 112)    0           block6b_drop[0][0]               \n","                                                                 block6a_project_bn[0][0]         \n","__________________________________________________________________________________________________\n","block6c_expand_conv (Conv2D)    (None, 7, 7, 672)    75264       block6b_add[0][0]                \n","__________________________________________________________________________________________________\n","block6c_expand_bn (BatchNormali (None, 7, 7, 672)    2688        block6c_expand_conv[0][0]        \n","__________________________________________________________________________________________________\n","block6c_expand_activation (Acti (None, 7, 7, 672)    0           block6c_expand_bn[0][0]          \n","__________________________________________________________________________________________________\n","block6c_dwconv (DepthwiseConv2D (None, 7, 7, 672)    16800       block6c_expand_activation[0][0]  \n","__________________________________________________________________________________________________\n","block6c_bn (BatchNormalization) (None, 7, 7, 672)    2688        block6c_dwconv[0][0]             \n","__________________________________________________________________________________________________\n","block6c_activation (Activation) (None, 7, 7, 672)    0           block6c_bn[0][0]                 \n","__________________________________________________________________________________________________\n","block6c_se_squeeze (GlobalAvera (None, 672)          0           block6c_activation[0][0]         \n","__________________________________________________________________________________________________\n","block6c_se_reshape (Reshape)    (None, 1, 1, 672)    0           block6c_se_squeeze[0][0]         \n","__________________________________________________________________________________________________\n","block6c_se_reduce (Conv2D)      (None, 1, 1, 28)     18844       block6c_se_reshape[0][0]         \n","__________________________________________________________________________________________________\n","block6c_se_expand (Conv2D)      (None, 1, 1, 672)    19488       block6c_se_reduce[0][0]          \n","__________________________________________________________________________________________________\n","block6c_se_excite (Multiply)    (None, 7, 7, 672)    0           block6c_activation[0][0]         \n","                                                                 block6c_se_expand[0][0]          \n","__________________________________________________________________________________________________\n","block6c_project_conv (Conv2D)   (None, 7, 7, 112)    75264       block6c_se_excite[0][0]          \n","__________________________________________________________________________________________________\n","block6c_project_bn (BatchNormal (None, 7, 7, 112)    448         block6c_project_conv[0][0]       \n","__________________________________________________________________________________________________\n","block6c_drop (Dropout)          (None, 7, 7, 112)    0           block6c_project_bn[0][0]         \n","__________________________________________________________________________________________________\n","block6c_add (Add)               (None, 7, 7, 112)    0           block6c_drop[0][0]               \n","                                                                 block6b_add[0][0]                \n","__________________________________________________________________________________________________\n","block6d_expand_conv (Conv2D)    (None, 7, 7, 672)    75264       block6c_add[0][0]                \n","__________________________________________________________________________________________________\n","block6d_expand_bn (BatchNormali (None, 7, 7, 672)    2688        block6d_expand_conv[0][0]        \n","__________________________________________________________________________________________________\n","block6d_expand_activation (Acti (None, 7, 7, 672)    0           block6d_expand_bn[0][0]          \n","__________________________________________________________________________________________________\n","block6d_dwconv (DepthwiseConv2D (None, 7, 7, 672)    16800       block6d_expand_activation[0][0]  \n","__________________________________________________________________________________________________\n","block6d_bn (BatchNormalization) (None, 7, 7, 672)    2688        block6d_dwconv[0][0]             \n","__________________________________________________________________________________________________\n","block6d_activation (Activation) (None, 7, 7, 672)    0           block6d_bn[0][0]                 \n","__________________________________________________________________________________________________\n","block6d_se_squeeze (GlobalAvera (None, 672)          0           block6d_activation[0][0]         \n","__________________________________________________________________________________________________\n","block6d_se_reshape (Reshape)    (None, 1, 1, 672)    0           block6d_se_squeeze[0][0]         \n","__________________________________________________________________________________________________\n","block6d_se_reduce (Conv2D)      (None, 1, 1, 28)     18844       block6d_se_reshape[0][0]         \n","__________________________________________________________________________________________________\n","block6d_se_expand (Conv2D)      (None, 1, 1, 672)    19488       block6d_se_reduce[0][0]          \n","__________________________________________________________________________________________________\n","block6d_se_excite (Multiply)    (None, 7, 7, 672)    0           block6d_activation[0][0]         \n","                                                                 block6d_se_expand[0][0]          \n","__________________________________________________________________________________________________\n","block6d_project_conv (Conv2D)   (None, 7, 7, 112)    75264       block6d_se_excite[0][0]          \n","__________________________________________________________________________________________________\n","block6d_project_bn (BatchNormal (None, 7, 7, 112)    448         block6d_project_conv[0][0]       \n","__________________________________________________________________________________________________\n","block6d_drop (Dropout)          (None, 7, 7, 112)    0           block6d_project_bn[0][0]         \n","__________________________________________________________________________________________________\n","block6d_add (Add)               (None, 7, 7, 112)    0           block6d_drop[0][0]               \n","                                                                 block6c_add[0][0]                \n","__________________________________________________________________________________________________\n","block7a_expand_conv (Conv2D)    (None, 7, 7, 672)    75264       block6d_add[0][0]                \n","__________________________________________________________________________________________________\n","block7a_expand_bn (BatchNormali (None, 7, 7, 672)    2688        block7a_expand_conv[0][0]        \n","__________________________________________________________________________________________________\n","block7a_expand_activation (Acti (None, 7, 7, 672)    0           block7a_expand_bn[0][0]          \n","__________________________________________________________________________________________________\n","block7a_dwconv (DepthwiseConv2D (None, 7, 7, 672)    6048        block7a_expand_activation[0][0]  \n","__________________________________________________________________________________________________\n","block7a_bn (BatchNormalization) (None, 7, 7, 672)    2688        block7a_dwconv[0][0]             \n","__________________________________________________________________________________________________\n","block7a_activation (Activation) (None, 7, 7, 672)    0           block7a_bn[0][0]                 \n","__________________________________________________________________________________________________\n","block7a_se_squeeze (GlobalAvera (None, 672)          0           block7a_activation[0][0]         \n","__________________________________________________________________________________________________\n","block7a_se_reshape (Reshape)    (None, 1, 1, 672)    0           block7a_se_squeeze[0][0]         \n","__________________________________________________________________________________________________\n","block7a_se_reduce (Conv2D)      (None, 1, 1, 28)     18844       block7a_se_reshape[0][0]         \n","__________________________________________________________________________________________________\n","block7a_se_expand (Conv2D)      (None, 1, 1, 672)    19488       block7a_se_reduce[0][0]          \n","__________________________________________________________________________________________________\n","block7a_se_excite (Multiply)    (None, 7, 7, 672)    0           block7a_activation[0][0]         \n","                                                                 block7a_se_expand[0][0]          \n","__________________________________________________________________________________________________\n","block7a_project_conv (Conv2D)   (None, 7, 7, 192)    129024      block7a_se_excite[0][0]          \n","__________________________________________________________________________________________________\n","block7a_project_bn (BatchNormal (None, 7, 7, 192)    768         block7a_project_conv[0][0]       \n","__________________________________________________________________________________________________\n","top_conv (Conv2D)               (None, 7, 7, 1280)   245760      block7a_project_bn[0][0]         \n","__________________________________________________________________________________________________\n","top_bn (BatchNormalization)     (None, 7, 7, 1280)   5120        top_conv[0][0]                   \n","__________________________________________________________________________________________________\n","top_activation (Activation)     (None, 7, 7, 1280)   0           top_bn[0][0]                     \n","__________________________________________________________________________________________________\n","avg_pool (GlobalAveragePooling2 (None, 1280)         0           top_activation[0][0]             \n","__________________________________________________________________________________________________\n","top_dropout (Dropout)           (None, 1280)         0           avg_pool[0][0]                   \n","__________________________________________________________________________________________________\n","predictions (Dense)             (None, 120)          153720      top_dropout[0][0]                \n","==================================================================================================\n","Total params: 1,715,513\n","Trainable params: 1,689,586\n","Non-trainable params: 25,927\n","__________________________________________________________________________________________________\n","Model: \"model_5\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","input_16 (InputLayer)        [(None, 224, 224, 3)]     0         \n","_________________________________________________________________\n","img_augmentation (Sequential (None, 224, 224, 3)       0         \n","_________________________________________________________________\n","efficientneta0 (Functional)  (None, 120)               1715513   \n","=================================================================\n","Total params: 1,715,513\n","Trainable params: 1,689,586\n","Non-trainable params: 25,927\n","_________________________________________________________________\n","Epoch 1/100\n","93/93 - 80s - loss: 4.9793 - accuracy: 0.0086 - val_loss: 4.8168 - val_accuracy: 0.0064\n","Epoch 2/100\n","93/93 - 68s - loss: 4.8318 - accuracy: 0.0134 - val_loss: 5.0592 - val_accuracy: 0.0139\n","Epoch 3/100\n","93/93 - 69s - loss: 4.6435 - accuracy: 0.0230 - val_loss: 5.3206 - val_accuracy: 0.0139\n","Epoch 4/100\n","93/93 - 69s - loss: 4.5044 - accuracy: 0.0307 - val_loss: 5.0834 - val_accuracy: 0.0154\n","Epoch 5/100\n","93/93 - 66s - loss: 4.4125 - accuracy: 0.0354 - val_loss: 4.4665 - val_accuracy: 0.0329\n","Epoch 6/100\n","93/93 - 68s - loss: 4.3297 - accuracy: 0.0416 - val_loss: 4.3577 - val_accuracy: 0.0440\n","Epoch 7/100\n","93/93 - 68s - loss: 4.2601 - accuracy: 0.0481 - val_loss: 4.3198 - val_accuracy: 0.0512\n","Epoch 8/100\n","93/93 - 63s - loss: 4.1916 - accuracy: 0.0560 - val_loss: 4.3545 - val_accuracy: 0.0515\n","Epoch 9/100\n","93/93 - 67s - loss: 4.1212 - accuracy: 0.0666 - val_loss: 4.1619 - val_accuracy: 0.0683\n","Epoch 10/100\n","93/93 - 68s - loss: 4.0493 - accuracy: 0.0722 - val_loss: 4.2159 - val_accuracy: 0.0682\n","Epoch 11/100\n","93/93 - 66s - loss: 3.9842 - accuracy: 0.0816 - val_loss: 4.1278 - val_accuracy: 0.0705\n","Epoch 12/100\n","93/93 - 68s - loss: 3.9222 - accuracy: 0.0908 - val_loss: 4.0538 - val_accuracy: 0.0865\n","Epoch 13/100\n","93/93 - 68s - loss: 3.8428 - accuracy: 0.0985 - val_loss: 4.0290 - val_accuracy: 0.0854\n","Epoch 14/100\n","93/93 - 68s - loss: 3.7772 - accuracy: 0.1100 - val_loss: 3.9490 - val_accuracy: 0.0900\n","Epoch 15/100\n","93/93 - 67s - loss: 3.7165 - accuracy: 0.1163 - val_loss: 3.9294 - val_accuracy: 0.1040\n","Epoch 16/100\n","93/93 - 68s - loss: 3.6472 - accuracy: 0.1343 - val_loss: 3.9959 - val_accuracy: 0.0955\n","Epoch 17/100\n","93/93 - 68s - loss: 3.5683 - accuracy: 0.1441 - val_loss: 4.1246 - val_accuracy: 0.0845\n","Epoch 18/100\n","93/93 - 68s - loss: 3.5111 - accuracy: 0.1540 - val_loss: 3.9563 - val_accuracy: 0.1065\n","Epoch 19/100\n","93/93 - 65s - loss: 3.4343 - accuracy: 0.1651 - val_loss: 3.8800 - val_accuracy: 0.1213\n","Epoch 20/100\n","93/93 - 67s - loss: 3.3615 - accuracy: 0.1724 - val_loss: 3.8749 - val_accuracy: 0.1221\n","Epoch 21/100\n","93/93 - 68s - loss: 3.2839 - accuracy: 0.1916 - val_loss: 3.9449 - val_accuracy: 0.1172\n","Epoch 22/100\n","93/93 - 66s - loss: 3.2408 - accuracy: 0.1983 - val_loss: 3.8654 - val_accuracy: 0.1248\n","Epoch 23/100\n","93/93 - 67s - loss: 3.1718 - accuracy: 0.2039 - val_loss: 3.9655 - val_accuracy: 0.1214\n","Epoch 24/100\n","93/93 - 67s - loss: 3.1109 - accuracy: 0.2160 - val_loss: 3.7384 - val_accuracy: 0.1476\n","Epoch 25/100\n","93/93 - 64s - loss: 3.0376 - accuracy: 0.2366 - val_loss: 3.8824 - val_accuracy: 0.1393\n","Epoch 26/100\n","93/93 - 66s - loss: 2.9605 - accuracy: 0.2417 - val_loss: 3.5080 - val_accuracy: 0.1762\n","Epoch 27/100\n","93/93 - 69s - loss: 2.9053 - accuracy: 0.2595 - val_loss: 3.9017 - val_accuracy: 0.1465\n","Epoch 28/100\n","93/93 - 66s - loss: 2.8511 - accuracy: 0.2611 - val_loss: 3.7462 - val_accuracy: 0.1571\n","Epoch 29/100\n","93/93 - 65s - loss: 2.7822 - accuracy: 0.2823 - val_loss: 3.7470 - val_accuracy: 0.1560\n","Epoch 30/100\n","93/93 - 66s - loss: 2.6973 - accuracy: 0.2937 - val_loss: 3.6548 - val_accuracy: 0.1761\n","Epoch 31/100\n","93/93 - 67s - loss: 2.6313 - accuracy: 0.3124 - val_loss: 3.6734 - val_accuracy: 0.1758\n","Epoch 32/100\n","93/93 - 66s - loss: 2.5767 - accuracy: 0.3177 - val_loss: 3.7235 - val_accuracy: 0.1737\n","Epoch 33/100\n","93/93 - 66s - loss: 2.4914 - accuracy: 0.3450 - val_loss: 4.0833 - val_accuracy: 0.1444\n","Epoch 34/100\n","93/93 - 66s - loss: 2.4363 - accuracy: 0.3522 - val_loss: 4.0780 - val_accuracy: 0.1552\n","Epoch 35/100\n","93/93 - 68s - loss: 2.3862 - accuracy: 0.3594 - val_loss: 4.0279 - val_accuracy: 0.1617\n","Epoch 36/100\n","93/93 - 68s - loss: 2.3118 - accuracy: 0.3808 - val_loss: 3.9920 - val_accuracy: 0.1692\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"EmxjNOUVD40t"},"source":["Training the model is relatively fast (takes only 20 seconds per epoch on TPUv2 that is\n","available on Colab). This might make it sounds easy to simply train EfficientNet on any\n","dataset wanted from scratch. However, training EfficientNet on smaller datasets,\n","especially those with lower resolution like CIFAR-100, faces the significant challenge of\n","overfitting.\n","\n","Hence training from scratch requires very careful choice of hyperparameters and is\n","difficult to find suitable regularization. It would also be much more demanding in resources.\n","Plotting the training and validation accuracy\n","makes it clear that validation accuracy stagnates at a low value."]},{"cell_type":"code","metadata":{"id":"qE9rY7VxD40u"},"source":["import matplotlib.pyplot as plt\n","\n","\n","def plot_hist(hist):\n","    plt.plot(hist.history[\"accuracy\"])\n","    plt.plot(hist.history[\"val_accuracy\"])\n","    plt.title(\"model accuracy\")\n","    plt.ylabel(\"accuracy\")\n","    plt.xlabel(\"epoch\")\n","    plt.legend([\"train\", \"validation\"], loc=\"upper left\")\n","    plt.show()\n","\n","\n","# plot_hist(hist)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ynVwA-v8D40u"},"source":["## Transfer learning from pre-trained weights\n","\n","Here we initialize the model with pre-trained ImageNet weights,\n","and we fine-tune it on our own dataset."]},{"cell_type":"code","metadata":{"id":"1X6zb5eID40u"},"source":["from tensorflow.keras.layers.experimental import preprocessing\n","\n","\n","def build_model(num_classes):\n","    inputs = layers.Input(shape=(IMG_SIZE, IMG_SIZE, 3))\n","    x = img_augmentation(inputs)\n","    model = EfficientNetA0(include_top=False, input_tensor=x, weights=\"imagenet\")\n","\n","    # Freeze the pretrained weights\n","    model.trainable = False\n","\n","    # Rebuild top\n","    x = layers.GlobalAveragePooling2D(name=\"avg_pool\")(model.output)\n","    x = layers.BatchNormalization()(x)\n","\n","    top_dropout_rate = 0.2\n","    x = layers.Dropout(top_dropout_rate, name=\"top_dropout\")(x)\n","    outputs = layers.Dense(NUM_CLASSES, activation=\"softmax\", name=\"pred\")(x)\n","\n","    # Compile\n","    model = tf.keras.Model(inputs, outputs, name=\"EfficientNet\")\n","    optimizer = tf.keras.optimizers.Adam(learning_rate=1e-2)\n","    model.compile(\n","        optimizer=optimizer, loss=\"categorical_crossentropy\", metrics=[\"accuracy\"]\n","    )\n","    return model\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Yrr1JmX0D40u"},"source":["The first step to transfer learning is to freeze all layers and train only the top\n","layers. For this step, a relatively large learning rate (1e-2) can be used.\n","Note that validation accuracy and loss will usually be better than training\n","accuracy and loss. This is because the regularization is strong, which only\n","suppresses training-time metrics.\n","\n","Note that the convergence may take up to 50 epochs depending on choice of learning rate.\n","If image augmentation layers were not\n","applied, the validation accuracy may only reach ~60%."]},{"cell_type":"code","metadata":{"id":"gqE1Qs3uD40u","colab":{"base_uri":"https://localhost:8080/","height":409},"executionInfo":{"status":"error","timestamp":1620020607645,"user_tz":420,"elapsed":2221934,"user":{"displayName":"Lance N.","photoUrl":"","userId":"10641691903871358793"}},"outputId":"a3f2026a-d2a0-4863-bb62-98e9fff34d37"},"source":["from tensorflow.keras.applications import EfficientNetB0\n","\n","with strategy.scope():\n","    model = build_model(num_classes=NUM_CLASSES)\n","\n","epochs = 80  # @param {type: \"slider\", min:1, max:100}\n","hist = model.fit(ds_train, epochs=epochs, validation_data=ds_test,\n","                 callbacks=[tf.keras.callbacks.EarlyStopping(patience=10)],\n","                 verbose=2)\n","plot_hist(hist)"],"execution_count":null,"outputs":[{"output_type":"error","ename":"KeyError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-18-c42ec366e6de>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mwith\u001b[0m \u001b[0mstrategy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscope\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m     \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbuild_model\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnum_classes\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mNUM_CLASSES\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0mepochs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m80\u001b[0m  \u001b[0;31m# @param {type: \"slider\", min:1, max:100}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-17-ccb87275d2f8>\u001b[0m in \u001b[0;36mbuild_model\u001b[0;34m(num_classes)\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0minputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlayers\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mInput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mIMG_SIZE\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mIMG_SIZE\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m3\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m     \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mimg_augmentation\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m     \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mEfficientNetA0\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minclude_top\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput_tensor\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mweights\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"imagenet\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m     \u001b[0;31m# Freeze the pretrained weights\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-14-0535cc795ee1>\u001b[0m in \u001b[0;36mEfficientNetA0\u001b[0;34m(include_top, weights, input_tensor, input_shape, pooling, classes, classifier_activation, **kwargs)\u001b[0m\n\u001b[1;32m    527\u001b[0m       \u001b[0mclasses\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mclasses\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    528\u001b[0m       \u001b[0mclassifier_activation\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mclassifier_activation\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 529\u001b[0;31m       **kwargs)\n\u001b[0m","\u001b[0;32m<ipython-input-14-0535cc795ee1>\u001b[0m in \u001b[0;36mEfficientNet\u001b[0;34m(width_coefficient, depth_coefficient, default_size, dropout_rate, drop_connect_rate, depth_divisor, activation, blocks_args, model_name, include_top, weights, input_tensor, input_shape, pooling, classes, classifier_activation)\u001b[0m\n\u001b[1;32m    388\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    389\u001b[0m       \u001b[0mfile_suffix\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'_notop.h5'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 390\u001b[0;31m       \u001b[0mfile_hash\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mWEIGHTS_HASHES\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mmodel_name\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    391\u001b[0m     \u001b[0mfile_name\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel_name\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mfile_suffix\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    392\u001b[0m     weights_path = data_utils.get_file(\n","\u001b[0;31mKeyError\u001b[0m: 'a0'"]}]},{"cell_type":"markdown","metadata":{"id":"wYM0gjpPD40v"},"source":["The second step is to unfreeze a number of layers and fit the model using smaller\n","learning rate. In this example we show unfreezing all layers, but depending on\n","specific dataset it may be desireble to only unfreeze a fraction of all layers.\n","\n","When the feature extraction with\n","pretrained model works good enough, this step would give a very limited gain on\n","validation accuracy. In our case we only see a small improvement,\n","as ImageNet pretraining already exposed the model to a good amount of dogs.\n","\n","On the other hand, when we use pretrained weights on a dataset that is more different\n","from ImageNet, this fine-tuning step can be crucial as the feature extractor also\n","needs to be adjusted by a considerable amount. Such a situation can be demonstrated\n","if choosing CIFAR-100 dataset instead, where fine-tuning boosts validation accuracy\n","by about 10% to pass 80% on `EfficientNetB0`.\n","In such a case the convergence may take more than 50 epochs.\n","\n","A side note on freezing/unfreezing models: setting `trainable` of a `Model` will\n","simultaneously set all layers belonging to the `Model` to the same `trainable`\n","attribute. Each layer is trainable only if both the layer itself and the model\n","containing it are trainable. Hence when we need to partially freeze/unfreeze\n","a model, we need to make sure the `trainable` attribute of the model is set\n","to `True`."]},{"cell_type":"code","metadata":{"id":"srpLcBZMD40v"},"source":["\n","def unfreeze_model(model, block7=True):\n","    # We unfreeze the final block and top layers while leaving BatchNorm layers frozen\n","    for i, layer in enumerate(model.layers):\n","        if (block7 and layer.name.startswith('block7')) or layer.name.startswith('top'):\n","            if not isinstance(layer, layers.BatchNormalization):\n","                layer.trainable = True\n","                print('unfreeze layer {} of {}: {}'.format(i, len(model.layers), layer.name))\n","\n","    optimizer = tf.keras.optimizers.Adam(learning_rate=1e-4)\n","    model.compile(\n","        optimizer=optimizer, loss=\"categorical_crossentropy\", metrics=[\"accuracy\"]\n","    )\n","\n","with strategy.scope():\n","    model = build_model(num_classes=NUM_CLASSES)\n","\n","unfreeze_model(model, block7=True)\n","\n","epochs = 50  # @param {type: \"slider\", min:1, max:100}\n","hist = model.fit(ds_train, epochs=epochs, validation_data=ds_test,\n","    callbacks=[tf.keras.callbacks.EarlyStopping(patience=10)],\n","    verbose=2)\n","plot_hist(hist)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"LNVhDniqD40v"},"source":["### Tips for fine tuning EfficientNet\n","\n","On unfreezing layers:\n","\n","- The `BathcNormalization` layers need to be kept frozen\n","([more details](https://keras.io/guides/transfer_learning/)).\n","If they are also turned to trainable, the\n","first epoch after unfreezing will significantly reduce accuracy.\n","- In some cases it may be beneficial to open up only a portion of layers instead of\n","unfreezing all. This will make fine tuning much faster when going to larger models like\n","B7.\n","- Each block needs to be all turned on or off. This is because the architecture includes\n","a shortcut from the first layer to the last layer for each block. Not respecting blocks\n","also significantly harms the final performance.\n","\n","Some other tips for utilizing EfficientNet:\n","\n","- Larger variants of EfficientNet do not guarantee improved performance, especially for\n","tasks with less data or fewer classes. In such a case, the larger variant of EfficientNet\n","chosen, the harder it is to tune hyperparameters.\n","- EMA (Exponential Moving Average) is very helpful in training EfficientNet from scratch,\n","but not so much for transfer learning.\n","- Do not use the RMSprop setup as in the original paper for transfer learning. The\n","momentum and learning rate are too high for transfer learning. It will easily corrupt the\n","pretrained weight and blow up the loss. A quick check is to see if loss (as categorical\n","cross entropy) is getting significantly larger than log(NUM_CLASSES) after the same\n","epoch. If so, the initial learning rate/momentum is too high.\n","- Smaller batch size benefit validation accuracy, possibly due to effectively providing\n","regularization.\n","\n","## Using the latest EfficientNet weights\n","\n","Since the initial paper, the EfficientNet has been improved by various methods for data\n","preprocessing and for using unlabelled data to enhance learning results. These\n","improvements are relatively hard and computationally costly to reproduce, and require\n","extra code; but the weights are readily available in the form of TF checkpoint files. The\n","model architecture has not changed, so loading the improved checkpoints is possible.\n","\n","To use a checkpoint provided at\n","[the official model repository](https://github.com/tensorflow/tpu/tree/master/models/official/efficientnet), first\n","download the checkpoint. As example, here we download noisy-student version of B1:\n","\n","```\n","!wget https://storage.googleapis.com/cloud-tpu-checkpoints/efficientnet\\\n","       /noisystudent/noisy_student_efficientnet-b1.tar.gz\n","!tar -xf noisy_student_efficientnet-b1.tar.gz\n","```\n","\n","Then use the script [efficientnet_weight_update_util.py](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/keras/applications/efficientnet_weight_update_util.py) to convert ckpt file to h5 file.\n","\n","```\n","!python efficientnet_weight_update_util.py --model b1 --notop --ckpt \\\n","        efficientnet-b1/model.ckpt --o efficientnetb1_notop.h5\n","```\n","\n","When creating model, use the following to load new weight:\n","\n","```python\n","model = EfficientNetB1(weights=\"efficientnetb1_notop.h5\", include_top=False)\n","```"]},{"cell_type":"markdown","metadata":{"id":"v9LvXsGxHKGe"},"source":["## Pruno2D"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NKp3KPAEHPFV","executionInfo":{"status":"ok","timestamp":1620032726520,"user_tz":420,"elapsed":7041,"user":{"displayName":"Lance N.","photoUrl":"","userId":"10641691903871358793"}},"outputId":"f677b9d9-5255-460e-b891-03f72a3f6154"},"source":["!pip install -q git+https://github.com/LanceNorskog/keras-pruno.git\n","from keras_pruno import Pruno2D"],"execution_count":null,"outputs":[{"output_type":"stream","text":["  Building wheel for keras-pruno (setup.py) ... \u001b[?25l\u001b[?25hdone\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"QpUL93_5uOcd"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"3rXwIWlcHbmI"},"source":["### Build a model with a Pruno2D dropout layer after the last CNN\n","Use EfficientnetB0 with Imagenet weights, leave completely frozen.\n","\n","Use Pruno2D to analyze the output of the final CNN, and affect the final GlobalAveragePooling2D and Dense layers. The Pruno2D layer confuses a BatchNormalization layer immediately afterward, so leave it out.\n","\n","Include the ability to unfreeze the EfficientNetB0 top, and the last of the CNN filter blocks, **block7**."]},{"cell_type":"code","metadata":{"id":"8W6M4VXyHlUb"},"source":["def build_model_pruno(num_classes, lr=1e-2, bn=False, batchwise=True, weights=\"imagenet\"):\n","    inputs = layers.Input(shape=(IMG_SIZE, IMG_SIZE, 3))\n","    x = img_augmentation(inputs)\n","    model = EfficientNetA0(include_top=False, input_tensor=x, weights=weights, downsize=0.6, dropout=0.0)\n","\n","    # Freeze the pretrained weights, train random init\n","    model.trainable = weights is None\n","\n","    # Rebuild top with Pruno2D. \n","    x = Pruno2D(0.65, batchwise=batchwise, norm=True, name='pred_pruno2d')(model.output)\n","    pruno_layer = x\n","    x = layers.GlobalAveragePooling2D(name=\"pred_avg_pool\")(x)\n","    if bn:\n","        x = layers.BatchNormalization()(x)\n","        bn_layer = x\n","    else:\n","        bn_layer = None\n","\n","    top_dropout_rate = 0.2\n","    x = layers.Dropout(top_dropout_rate, name=\"pred_dropout\")(x)\n","    outputs = layers.Dense(NUM_CLASSES, activation=\"softmax\", name=\"pred\")(x)\n","\n","    # Compile\n","    model = tf.keras.Model(inputs, outputs, name=\"EfficientNet\")\n","    optimizer = tf.keras.optimizers.Adam(learning_rate=lr)\n","    model.compile(\n","        optimizer=optimizer, loss=\"categorical_crossentropy\", metrics=[\"accuracy\"]\n","    )\n","    return model, pruno_layer, bn_layer\n","\n","def unfreeze_model(model, block7=True, lr=1e-4):\n","    # We unfreeze the final block and top layers while leaving BatchNorm layers frozen\n","    for i, layer in enumerate(model.layers):\n","        if (block7 and layer.name.startswith('block7')) or layer.name.startswith('top'):\n","            if not isinstance(layer, layers.BatchNormalization):\n","                layer.trainable = True\n","                print('unfreeze layer {} of {}: {}'.format(i, len(model.layers), layer.name))\n","\n","    optimizer = tf.keras.optimizers.Adam(learning_rate=lr)\n","    model.compile(\n","        optimizer=optimizer, loss=\"categorical_crossentropy\", metrics=[\"accuracy\"]\n","    )\n","\n","# Use patience=10 for all tests\n","early = tf.keras.callbacks.EarlyStopping(patience=10, restore_best_weights=True)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"VKf9mOG3uOG-"},"source":["### Full Training with Pruno2D\n","First, do a full training of all of the layers, with a Pruno2D layer at the end."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jkTuqiyduzQZ","executionInfo":{"status":"ok","timestamp":1620035396685,"user_tz":420,"elapsed":2657134,"user":{"displayName":"Lance N.","photoUrl":"","userId":"10641691903871358793"}},"outputId":"a984e044-36dc-4bff-d70e-e632bcdade7b"},"source":["# keras.backend.clear_session()\n","with strategy.scope():\n","    model, _, _ = build_model_pruno(num_classes=NUM_CLASSES, \n","                                    lr=1e-3, batchwise=True, weights=None)\n","\n","epochs = 100  \n","hist = model.fit(ds_train, epochs=epochs, validation_data=ds_test,\n","                 callbacks=[early],\n","                 verbose=2)\n","print('Best:', model.evaluate(ds_test, verbose=0))\n","plot_hist(hist)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["__init__: similarity: 0.65\n","Pruno2D.build: input_shape: (None, 7, 7, 1280)\n","Pruno2D.build: self.fmap_shape: (7, 7)\n","Epoch 1/100\n","Pruno2D.call: type inputs.shape: <class 'tensorflow.python.framework.tensor_shape.TensorShape'>\n","Pruno2D.call: inputs.shape: (128, 7, 7, 1280)\n","Pruno2D.call: self.fmap_shape: (7, 7)\n","actual_batchsize: Tensor(\"EfficientNet/pred_pruno2d/strided_slice:0\", shape=(1,), dtype=int32, device=/job:localhost/replica:0/task:0/device:GPU:0)\n","batchwise\n","Pruno2D.call: type inputs.shape: <class 'tensorflow.python.framework.tensor_shape.TensorShape'>\n","Pruno2D.call: inputs.shape: (128, 7, 7, 1280)\n","Pruno2D.call: self.fmap_shape: ListWrapper([7, 7])\n","actual_batchsize: Tensor(\"EfficientNet/pred_pruno2d/strided_slice:0\", shape=(1,), dtype=int32, device=/job:localhost/replica:0/task:0/device:GPU:0)\n","batchwise\n","93/93 - 106s - loss: 4.9219 - accuracy: 0.0105 - val_loss: 4.7952 - val_accuracy: 0.0100\n","Epoch 2/100\n","93/93 - 69s - loss: 4.7627 - accuracy: 0.0156 - val_loss: 5.2164 - val_accuracy: 0.0061\n","Epoch 3/100\n","93/93 - 68s - loss: 4.5761 - accuracy: 0.0246 - val_loss: 5.5318 - val_accuracy: 0.0101\n","Epoch 4/100\n","93/93 - 69s - loss: 4.4420 - accuracy: 0.0355 - val_loss: 5.6583 - val_accuracy: 0.0154\n","Epoch 5/100\n","93/93 - 68s - loss: 4.3373 - accuracy: 0.0427 - val_loss: 5.0779 - val_accuracy: 0.0224\n","Epoch 6/100\n","93/93 - 68s - loss: 4.2491 - accuracy: 0.0494 - val_loss: 4.3397 - val_accuracy: 0.0497\n","Epoch 7/100\n","93/93 - 69s - loss: 4.1673 - accuracy: 0.0556 - val_loss: 4.5083 - val_accuracy: 0.0379\n","Epoch 8/100\n","93/93 - 67s - loss: 4.1117 - accuracy: 0.0607 - val_loss: 4.2510 - val_accuracy: 0.0568\n","Epoch 9/100\n","93/93 - 69s - loss: 4.0458 - accuracy: 0.0706 - val_loss: 4.2419 - val_accuracy: 0.0613\n","Epoch 10/100\n","93/93 - 68s - loss: 3.9824 - accuracy: 0.0801 - val_loss: 4.1902 - val_accuracy: 0.0601\n","Epoch 11/100\n","93/93 - 68s - loss: 3.9140 - accuracy: 0.0889 - val_loss: 3.9577 - val_accuracy: 0.0861\n","Epoch 12/100\n","93/93 - 68s - loss: 3.8503 - accuracy: 0.0948 - val_loss: 4.1925 - val_accuracy: 0.0760\n","Epoch 13/100\n","93/93 - 69s - loss: 3.7938 - accuracy: 0.1006 - val_loss: 4.0419 - val_accuracy: 0.0798\n","Epoch 14/100\n","93/93 - 67s - loss: 3.7194 - accuracy: 0.1167 - val_loss: 4.0563 - val_accuracy: 0.0808\n","Epoch 15/100\n","93/93 - 70s - loss: 3.6531 - accuracy: 0.1287 - val_loss: 4.1881 - val_accuracy: 0.0777\n","Epoch 16/100\n","93/93 - 69s - loss: 3.5891 - accuracy: 0.1337 - val_loss: 4.0812 - val_accuracy: 0.0852\n","Epoch 17/100\n","93/93 - 68s - loss: 3.5295 - accuracy: 0.1452 - val_loss: 3.9846 - val_accuracy: 0.0936\n","Epoch 18/100\n","93/93 - 68s - loss: 3.4585 - accuracy: 0.1593 - val_loss: 3.9471 - val_accuracy: 0.1034\n","Epoch 19/100\n","93/93 - 68s - loss: 3.3997 - accuracy: 0.1636 - val_loss: 3.8777 - val_accuracy: 0.1123\n","Epoch 20/100\n","93/93 - 70s - loss: 3.3342 - accuracy: 0.1715 - val_loss: 3.9006 - val_accuracy: 0.1172\n","Epoch 21/100\n","93/93 - 69s - loss: 3.2732 - accuracy: 0.1860 - val_loss: 4.2235 - val_accuracy: 0.0944\n","Epoch 22/100\n","93/93 - 68s - loss: 3.2174 - accuracy: 0.1977 - val_loss: 3.9441 - val_accuracy: 0.1158\n","Epoch 23/100\n","93/93 - 69s - loss: 3.1499 - accuracy: 0.2090 - val_loss: 3.6251 - val_accuracy: 0.1525\n","Epoch 24/100\n","93/93 - 68s - loss: 3.0865 - accuracy: 0.2201 - val_loss: 3.9343 - val_accuracy: 0.1391\n","Epoch 25/100\n","93/93 - 68s - loss: 3.0240 - accuracy: 0.2344 - val_loss: 3.8356 - val_accuracy: 0.1372\n","Epoch 26/100\n","93/93 - 68s - loss: 2.9562 - accuracy: 0.2419 - val_loss: 3.8225 - val_accuracy: 0.1337\n","Epoch 27/100\n","93/93 - 69s - loss: 2.8814 - accuracy: 0.2618 - val_loss: 3.8666 - val_accuracy: 0.1409\n","Epoch 28/100\n","93/93 - 70s - loss: 2.8136 - accuracy: 0.2754 - val_loss: 3.6202 - val_accuracy: 0.1678\n","Epoch 29/100\n","93/93 - 69s - loss: 2.7605 - accuracy: 0.2838 - val_loss: 3.6402 - val_accuracy: 0.1735\n","Epoch 30/100\n","93/93 - 68s - loss: 2.7019 - accuracy: 0.2935 - val_loss: 3.7856 - val_accuracy: 0.1643\n","Epoch 31/100\n","93/93 - 68s - loss: 2.6499 - accuracy: 0.3026 - val_loss: 3.8754 - val_accuracy: 0.1533\n","Epoch 32/100\n","93/93 - 69s - loss: 2.5784 - accuracy: 0.3159 - val_loss: 3.7417 - val_accuracy: 0.1686\n","Epoch 33/100\n","93/93 - 69s - loss: 2.5102 - accuracy: 0.3316 - val_loss: 3.7418 - val_accuracy: 0.1804\n","Epoch 34/100\n","93/93 - 67s - loss: 2.4565 - accuracy: 0.3422 - val_loss: 3.6779 - val_accuracy: 0.1839\n","Epoch 35/100\n","93/93 - 69s - loss: 2.4042 - accuracy: 0.3505 - val_loss: 3.8915 - val_accuracy: 0.1746\n","Epoch 36/100\n","93/93 - 68s - loss: 2.3313 - accuracy: 0.3718 - val_loss: 3.9333 - val_accuracy: 0.1660\n","Epoch 37/100\n","93/93 - 69s - loss: 2.2663 - accuracy: 0.3831 - val_loss: 3.7052 - val_accuracy: 0.1865\n","Epoch 38/100\n","93/93 - 68s - loss: 2.1870 - accuracy: 0.3997 - val_loss: 3.7765 - val_accuracy: 0.1861\n","Best: [3.6202242374420166, 0.16779384016990662]\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"6yFT_rTyv3-h"},"source":["Results:"]},{"cell_type":"markdown","metadata":{"id":"1pDekO15JWKa"},"source":["### Basic test of Pruno2D\n","Do a training pass with only the final prediction top set to trainable."]},{"cell_type":"code","metadata":{"id":"7k1SG1vOJWVB"},"source":["with strategy.scope():\n","    model, _, _ = build_model_pruno(num_classes=NUM_CLASSES, batchwise=True)\n","\n","epochs = 100 \n","hist = model.fit(ds_train, epochs=epochs, validation_data=ds_test,\n","                 callbacks=[early],\n","                 verbose=2)\n","print('Best:', model.evaluate(ds_test, verbose=0))\n","plot_hist(hist)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"bjtOHXpIr7d0"},"source":["The Pruno2D layer confuses this process. This makes sense: Pruno2D critiques the feature maps handed to it from previous layers. If the previous layers cannot be retrained, the network cannot improve from the criticism. And, the dropout events confuse the subsequent layers. Try this again with the internal 'top' layers unfrozen."]},{"cell_type":"markdown","metadata":{"id":"nHGZDgdjNYdy"},"source":["Now try without batchwise, norm=True\n","\n"]},{"cell_type":"code","metadata":{"id":"p0NY16-dr54K"},"source":["with strategy.scope():\n","    model, _, _ = build_model_pruno(num_classes=NUM_CLASSES, batchwise=True)\n","\n","unfreeze_model(model, block7=False, lr=1e-4)\n","\n","epochs = 100 \n","hist = model.fit(ds_train, epochs=epochs, validation_data=ds_test,\n","                 callbacks=[early],\n","                 verbose=2)\n","print('Best:', model.evaluate(ds_test, verbose=0))\n","plot_hist(hist)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"KGBk3AFfJ3tO"},"source":["Note that the val_loss drops steadily, unlike all previous training sessions. I believe that this implies that this is an optimal combination of trainable layers and learning rate."]},{"cell_type":"markdown","metadata":{"id":"f5TEuY9jDb6V"},"source":["Finally, we will test the effects of unfreezing block7 along with the top layers. We will adjust the learning rate to accomodate the larger number of layers."]},{"cell_type":"code","metadata":{"id":"H_9kCssoD-0a"},"source":["with strategy.scope():\n","    model, _, _ = build_model_pruno(num_classes=NUM_CLASSES, batchwise=True)\n","\n","unfreeze_model(model, block7=True, lr=1e-4)\n","\n","epochs = 100  # @param {type: \"slider\", min:8, max:100}\n","hist = model.fit(ds_train, epochs=epochs, validation_data=ds_test,\n","                 callbacks=[early],\n","                 verbose=2)\n","print('Best:', model.evaluate(ds_test, verbose=0))\n","plot_hist(hist)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"OVdx0eOQO7aP"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"urS824GPhXrm"},"source":["# Looks good!\n","Freeze work. Move onto another CNN, get a few more such \"extended notebooks\" done, then rename to Wedge and do final.\n","\n"]}]}