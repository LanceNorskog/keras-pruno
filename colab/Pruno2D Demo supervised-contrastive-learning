{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Pruno2D Demo supervised-contrastive-learning","provenance":[{"file_id":"https://github.com/keras-team/keras-io/blob/master/examples/vision/ipynb/supervised-contrastive-learning.ipynb","timestamp":1618035357189}],"collapsed_sections":[],"toc_visible":true,"machine_shape":"hm"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.0"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"m0uBLnRCbCnp"},"source":["# Supervised Contrastive Learning\n","\n","**Author:** [Khalid Salama](https://www.linkedin.com/in/khalid-salama-24403144/)<br>\n","**Date created:** 2020/11/30<br>\n","**Last modified:** 2020/11/30<br>\n","**Description:** Using supervised contrastive learning for image classification."]},{"cell_type":"markdown","metadata":{"id":"QhjtLYAHbCnw"},"source":["## Introduction\n","\n","[Supervised Contrastive Learning](https://arxiv.org/abs/2004.11362)\n","(Prannay Khosla et al.) is a training methodology that outperforms\n","supervised training with crossentropy on classification tasks.\n","\n","Essentially, training an image classification model with Supervised Contrastive\n","Learning is performed in two phases:\n","\n","1. Training an encoder to learn to produce vector representations of input images such\n","that representations of images in the same class will be more similar compared to\n","representations of images in different classes.\n","2. Training a classifier on top of the frozen encoder.\n","\n","Note that this example requires [TensorFlow Addons](https://www.tensorflow.org/addons), which you can install using the following command:\n","\n","```python\n","pip install tensorflow-addons\n","```\n","\n","## Setup"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"j6JW6wUzdCKn","executionInfo":{"status":"ok","timestamp":1618035918680,"user_tz":420,"elapsed":5023,"user":{"displayName":"Lance N.","photoUrl":"","userId":"10641691903871358793"}},"outputId":"1bab1d62-a2e4-4129-eb0b-87d44f7828fb"},"source":["#Added\n","!pip install -q tensorflow-addons\n"],"execution_count":1,"outputs":[{"output_type":"stream","text":["\u001b[?25l\r\u001b[K     |▌                               | 10kB 19.9MB/s eta 0:00:01\r\u001b[K     |█                               | 20kB 20.0MB/s eta 0:00:01\r\u001b[K     |█▍                              | 30kB 14.2MB/s eta 0:00:01\r\u001b[K     |█▉                              | 40kB 12.8MB/s eta 0:00:01\r\u001b[K     |██▎                             | 51kB 8.9MB/s eta 0:00:01\r\u001b[K     |██▉                             | 61kB 8.1MB/s eta 0:00:01\r\u001b[K     |███▎                            | 71kB 9.0MB/s eta 0:00:01\r\u001b[K     |███▊                            | 81kB 9.7MB/s eta 0:00:01\r\u001b[K     |████▏                           | 92kB 9.2MB/s eta 0:00:01\r\u001b[K     |████▋                           | 102kB 8.4MB/s eta 0:00:01\r\u001b[K     |█████▏                          | 112kB 8.4MB/s eta 0:00:01\r\u001b[K     |█████▋                          | 122kB 8.4MB/s eta 0:00:01\r\u001b[K     |██████                          | 133kB 8.4MB/s eta 0:00:01\r\u001b[K     |██████▌                         | 143kB 8.4MB/s eta 0:00:01\r\u001b[K     |███████                         | 153kB 8.4MB/s eta 0:00:01\r\u001b[K     |███████▌                        | 163kB 8.4MB/s eta 0:00:01\r\u001b[K     |████████                        | 174kB 8.4MB/s eta 0:00:01\r\u001b[K     |████████▍                       | 184kB 8.4MB/s eta 0:00:01\r\u001b[K     |████████▉                       | 194kB 8.4MB/s eta 0:00:01\r\u001b[K     |█████████▎                      | 204kB 8.4MB/s eta 0:00:01\r\u001b[K     |█████████▉                      | 215kB 8.4MB/s eta 0:00:01\r\u001b[K     |██████████▎                     | 225kB 8.4MB/s eta 0:00:01\r\u001b[K     |██████████▊                     | 235kB 8.4MB/s eta 0:00:01\r\u001b[K     |███████████▏                    | 245kB 8.4MB/s eta 0:00:01\r\u001b[K     |███████████▋                    | 256kB 8.4MB/s eta 0:00:01\r\u001b[K     |████████████▏                   | 266kB 8.4MB/s eta 0:00:01\r\u001b[K     |████████████▋                   | 276kB 8.4MB/s eta 0:00:01\r\u001b[K     |█████████████                   | 286kB 8.4MB/s eta 0:00:01\r\u001b[K     |█████████████▌                  | 296kB 8.4MB/s eta 0:00:01\r\u001b[K     |██████████████                  | 307kB 8.4MB/s eta 0:00:01\r\u001b[K     |██████████████▍                 | 317kB 8.4MB/s eta 0:00:01\r\u001b[K     |███████████████                 | 327kB 8.4MB/s eta 0:00:01\r\u001b[K     |███████████████▍                | 337kB 8.4MB/s eta 0:00:01\r\u001b[K     |███████████████▉                | 348kB 8.4MB/s eta 0:00:01\r\u001b[K     |████████████████▎               | 358kB 8.4MB/s eta 0:00:01\r\u001b[K     |████████████████▊               | 368kB 8.4MB/s eta 0:00:01\r\u001b[K     |█████████████████▎              | 378kB 8.4MB/s eta 0:00:01\r\u001b[K     |█████████████████▊              | 389kB 8.4MB/s eta 0:00:01\r\u001b[K     |██████████████████▏             | 399kB 8.4MB/s eta 0:00:01\r\u001b[K     |██████████████████▋             | 409kB 8.4MB/s eta 0:00:01\r\u001b[K     |███████████████████             | 419kB 8.4MB/s eta 0:00:01\r\u001b[K     |███████████████████▋            | 430kB 8.4MB/s eta 0:00:01\r\u001b[K     |████████████████████            | 440kB 8.4MB/s eta 0:00:01\r\u001b[K     |████████████████████▌           | 450kB 8.4MB/s eta 0:00:01\r\u001b[K     |█████████████████████           | 460kB 8.4MB/s eta 0:00:01\r\u001b[K     |█████████████████████▍          | 471kB 8.4MB/s eta 0:00:01\r\u001b[K     |██████████████████████          | 481kB 8.4MB/s eta 0:00:01\r\u001b[K     |██████████████████████▍         | 491kB 8.4MB/s eta 0:00:01\r\u001b[K     |██████████████████████▉         | 501kB 8.4MB/s eta 0:00:01\r\u001b[K     |███████████████████████▎        | 512kB 8.4MB/s eta 0:00:01\r\u001b[K     |███████████████████████▊        | 522kB 8.4MB/s eta 0:00:01\r\u001b[K     |████████████████████████▎       | 532kB 8.4MB/s eta 0:00:01\r\u001b[K     |████████████████████████▊       | 542kB 8.4MB/s eta 0:00:01\r\u001b[K     |█████████████████████████▏      | 552kB 8.4MB/s eta 0:00:01\r\u001b[K     |█████████████████████████▋      | 563kB 8.4MB/s eta 0:00:01\r\u001b[K     |██████████████████████████      | 573kB 8.4MB/s eta 0:00:01\r\u001b[K     |██████████████████████████▋     | 583kB 8.4MB/s eta 0:00:01\r\u001b[K     |███████████████████████████     | 593kB 8.4MB/s eta 0:00:01\r\u001b[K     |███████████████████████████▌    | 604kB 8.4MB/s eta 0:00:01\r\u001b[K     |████████████████████████████    | 614kB 8.4MB/s eta 0:00:01\r\u001b[K     |████████████████████████████▍   | 624kB 8.4MB/s eta 0:00:01\r\u001b[K     |████████████████████████████▉   | 634kB 8.4MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████▍  | 645kB 8.4MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████▉  | 655kB 8.4MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████▎ | 665kB 8.4MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████▊ | 675kB 8.4MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████▏| 686kB 8.4MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████▊| 696kB 8.4MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 706kB 8.4MB/s \n","\u001b[?25h"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"vI79NXHgbCnx","executionInfo":{"status":"ok","timestamp":1618035920284,"user_tz":420,"elapsed":6617,"user":{"displayName":"Lance N.","photoUrl":"","userId":"10641691903871358793"}}},"source":["import tensorflow as tf\n","import tensorflow_addons as tfa\n","import numpy as np\n","from tensorflow import keras\n","from tensorflow.keras import layers"],"execution_count":2,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"PptxhEkdbCny"},"source":["## Prepare the data"]},{"cell_type":"code","metadata":{"id":"8OJBKbbgbCny","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1618035926960,"user_tz":420,"elapsed":13286,"user":{"displayName":"Lance N.","photoUrl":"","userId":"10641691903871358793"}},"outputId":"98f81240-75e3-44e1-94dd-2c0e59ac87df"},"source":["num_classes = 10\n","input_shape = (32, 32, 3)\n","\n","# Load the train and test data splits\n","(x_train, y_train), (x_test, y_test) = keras.datasets.cifar10.load_data()\n","\n","# Display shapes of train and test datasets\n","print(f\"x_train shape: {x_train.shape} - y_train shape: {y_train.shape}\")\n","print(f\"x_test shape: {x_test.shape} - y_test shape: {y_test.shape}\")\n"],"execution_count":3,"outputs":[{"output_type":"stream","text":["Downloading data from https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz\n","170500096/170498071 [==============================] - 3s 0us/step\n","x_train shape: (50000, 32, 32, 3) - y_train shape: (50000, 1)\n","x_test shape: (10000, 32, 32, 3) - y_test shape: (10000, 1)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"WRNrQ6xRbCnz"},"source":["## Using image data augmentation"]},{"cell_type":"code","metadata":{"id":"3Tb8P9ZMbCnz","executionInfo":{"status":"ok","timestamp":1618035931149,"user_tz":420,"elapsed":17469,"user":{"displayName":"Lance N.","photoUrl":"","userId":"10641691903871358793"}}},"source":["data_augmentation = keras.Sequential(\n","    [\n","        layers.experimental.preprocessing.Normalization(),\n","        layers.experimental.preprocessing.RandomFlip(\"horizontal\"),\n","        layers.experimental.preprocessing.RandomRotation(0.02),\n","        layers.experimental.preprocessing.RandomWidth(0.2),\n","        layers.experimental.preprocessing.RandomHeight(0.2),\n","    ]\n",")\n","\n","# Setting the state of the normalization layer.\n","data_augmentation.layers[0].adapt(x_train)"],"execution_count":4,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"04glamWVbCnz"},"source":["## Build the encoder model\n","\n","The encoder model takes the image as input and turns it into a 2048-dimensional\n","feature vector."]},{"cell_type":"code","metadata":{"id":"A97XLrGObCn0","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1618035932859,"user_tz":420,"elapsed":19173,"user":{"displayName":"Lance N.","photoUrl":"","userId":"10641691903871358793"}},"outputId":"4bbf43fb-e7df-4af5-fbdb-9c78c34910d8"},"source":["\n","def create_encoder():\n","    resnet = keras.applications.ResNet50V2(\n","        include_top=False, weights=None, input_shape=input_shape, pooling=\"avg\"\n","    )\n","\n","    inputs = keras.Input(shape=input_shape)\n","    augmented = data_augmentation(inputs)\n","    outputs = resnet(augmented)\n","    model = keras.Model(inputs=inputs, outputs=outputs, name=\"cifar10-encoder\")\n","    return model\n","\n","\n","encoder = create_encoder()\n","encoder.summary()\n","\n","learning_rate = 0.001\n","batch_size = 265\n","hidden_units = 512\n","projection_units = 128\n","num_epochs = 50\n","dropout_rate = 0.5\n","temperature = 0.05"],"execution_count":5,"outputs":[{"output_type":"stream","text":["Model: \"cifar10-encoder\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","input_2 (InputLayer)         [(None, 32, 32, 3)]       0         \n","_________________________________________________________________\n","sequential (Sequential)      (None, None, None, 3)     7         \n","_________________________________________________________________\n","resnet50v2 (Functional)      (None, 2048)              23564800  \n","=================================================================\n","Total params: 23,564,807\n","Trainable params: 23,519,360\n","Non-trainable params: 45,447\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"ajJHjqjAbCn0"},"source":["## Build the classification model\n","\n","The classification model adds a fully-connected layer on top of the encoder,\n","plus a softmax layer with the target classes."]},{"cell_type":"code","metadata":{"id":"EFdFlBR_bCn0","executionInfo":{"status":"ok","timestamp":1618035932860,"user_tz":420,"elapsed":19168,"user":{"displayName":"Lance N.","photoUrl":"","userId":"10641691903871358793"}}},"source":["\n","def create_classifier(encoder, trainable=True):\n","\n","    for layer in encoder.layers:\n","        layer.trainable = trainable\n","\n","    inputs = keras.Input(shape=input_shape)\n","    features = encoder(inputs)\n","    features = layers.Dropout(dropout_rate)(features)\n","    features = layers.Dense(hidden_units, activation=\"relu\")(features)\n","    features = layers.Dropout(dropout_rate)(features)\n","    outputs = layers.Dense(num_classes, activation=\"softmax\")(features)\n","\n","    model = keras.Model(inputs=inputs, outputs=outputs, name=\"cifar10-classifier\")\n","    model.compile(\n","        optimizer=keras.optimizers.Adam(learning_rate),\n","        loss=keras.losses.SparseCategoricalCrossentropy(),\n","        metrics=[keras.metrics.SparseCategoricalAccuracy()],\n","    )\n","    return model\n"],"execution_count":6,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"_bx690XrbCn1"},"source":["## Experiment 1: Train the baseline classification model\n","\n","In this experiment, a baseline classifier is trained as usual, i.e., the\n","encoder and the classifier parts are trained together as a single model\n","to minimize the crossentropy loss."]},{"cell_type":"code","metadata":{"id":"9leLfQpnbCn1","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1618036747972,"user_tz":420,"elapsed":834274,"user":{"displayName":"Lance N.","photoUrl":"","userId":"10641691903871358793"}},"outputId":"aa94746e-9bdc-4c1e-8e65-112c087fbc51"},"source":["encoder = create_encoder()\n","classifier = create_classifier(encoder)\n","classifier.summary()\n","\n","history = classifier.fit(x=x_train, y=y_train, batch_size=batch_size, epochs=num_epochs)\n","\n","accuracy = classifier.evaluate(x_test, y_test)[1]\n","print(f\"Test accuracy: {round(accuracy * 100, 2)}%\")\n"],"execution_count":7,"outputs":[{"output_type":"stream","text":["Model: \"cifar10-classifier\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","input_5 (InputLayer)         [(None, 32, 32, 3)]       0         \n","_________________________________________________________________\n","cifar10-encoder (Functional) (None, 2048)              23564807  \n","_________________________________________________________________\n","dropout (Dropout)            (None, 2048)              0         \n","_________________________________________________________________\n","dense (Dense)                (None, 512)               1049088   \n","_________________________________________________________________\n","dropout_1 (Dropout)          (None, 512)               0         \n","_________________________________________________________________\n","dense_1 (Dense)              (None, 10)                5130      \n","=================================================================\n","Total params: 24,619,025\n","Trainable params: 24,573,578\n","Non-trainable params: 45,447\n","_________________________________________________________________\n","Epoch 1/50\n","189/189 [==============================] - 45s 118ms/step - loss: 2.2120 - sparse_categorical_accuracy: 0.2131\n","Epoch 2/50\n","189/189 [==============================] - 17s 90ms/step - loss: 1.5551 - sparse_categorical_accuracy: 0.4315\n","Epoch 3/50\n","189/189 [==============================] - 17s 88ms/step - loss: 1.3612 - sparse_categorical_accuracy: 0.5122\n","Epoch 4/50\n","189/189 [==============================] - 16s 82ms/step - loss: 1.2352 - sparse_categorical_accuracy: 0.5606\n","Epoch 5/50\n","189/189 [==============================] - 16s 86ms/step - loss: 1.1216 - sparse_categorical_accuracy: 0.6093\n","Epoch 6/50\n","189/189 [==============================] - 16s 82ms/step - loss: 1.0596 - sparse_categorical_accuracy: 0.6341\n","Epoch 7/50\n","189/189 [==============================] - 16s 83ms/step - loss: 0.9585 - sparse_categorical_accuracy: 0.6663\n","Epoch 8/50\n","189/189 [==============================] - 16s 82ms/step - loss: 0.9032 - sparse_categorical_accuracy: 0.6868\n","Epoch 9/50\n","189/189 [==============================] - 15s 81ms/step - loss: 0.8624 - sparse_categorical_accuracy: 0.7053\n","Epoch 10/50\n","189/189 [==============================] - 16s 83ms/step - loss: 0.8010 - sparse_categorical_accuracy: 0.7224\n","Epoch 11/50\n","189/189 [==============================] - 15s 80ms/step - loss: 0.7583 - sparse_categorical_accuracy: 0.7377\n","Epoch 12/50\n","189/189 [==============================] - 15s 81ms/step - loss: 0.8251 - sparse_categorical_accuracy: 0.7181\n","Epoch 13/50\n","189/189 [==============================] - 16s 82ms/step - loss: 0.9894 - sparse_categorical_accuracy: 0.6623\n","Epoch 14/50\n","189/189 [==============================] - 15s 81ms/step - loss: 0.8316 - sparse_categorical_accuracy: 0.7191\n","Epoch 15/50\n","189/189 [==============================] - 15s 82ms/step - loss: 0.7782 - sparse_categorical_accuracy: 0.7354\n","Epoch 16/50\n","189/189 [==============================] - 15s 82ms/step - loss: 0.9019 - sparse_categorical_accuracy: 0.6891\n","Epoch 17/50\n","189/189 [==============================] - 15s 81ms/step - loss: 0.7486 - sparse_categorical_accuracy: 0.7439\n","Epoch 18/50\n","189/189 [==============================] - 15s 81ms/step - loss: 0.7325 - sparse_categorical_accuracy: 0.7550\n","Epoch 19/50\n","189/189 [==============================] - 15s 81ms/step - loss: 0.6724 - sparse_categorical_accuracy: 0.7692\n","Epoch 20/50\n","189/189 [==============================] - 15s 80ms/step - loss: 0.6340 - sparse_categorical_accuracy: 0.7835\n","Epoch 21/50\n","189/189 [==============================] - 15s 80ms/step - loss: 0.6052 - sparse_categorical_accuracy: 0.7958\n","Epoch 22/50\n","189/189 [==============================] - 15s 81ms/step - loss: 0.5751 - sparse_categorical_accuracy: 0.8035\n","Epoch 23/50\n","189/189 [==============================] - 15s 82ms/step - loss: 0.5472 - sparse_categorical_accuracy: 0.8096\n","Epoch 24/50\n","189/189 [==============================] - 15s 81ms/step - loss: 0.5309 - sparse_categorical_accuracy: 0.8188\n","Epoch 25/50\n","189/189 [==============================] - 15s 81ms/step - loss: 0.5184 - sparse_categorical_accuracy: 0.8213\n","Epoch 26/50\n","189/189 [==============================] - 15s 82ms/step - loss: 0.5324 - sparse_categorical_accuracy: 0.8222\n","Epoch 27/50\n","189/189 [==============================] - 16s 82ms/step - loss: 0.9052 - sparse_categorical_accuracy: 0.6978\n","Epoch 28/50\n","189/189 [==============================] - 15s 81ms/step - loss: 0.6103 - sparse_categorical_accuracy: 0.7939\n","Epoch 29/50\n","189/189 [==============================] - 15s 81ms/step - loss: 0.5682 - sparse_categorical_accuracy: 0.8055\n","Epoch 30/50\n","189/189 [==============================] - 15s 82ms/step - loss: 0.5170 - sparse_categorical_accuracy: 0.8264\n","Epoch 31/50\n","189/189 [==============================] - 15s 81ms/step - loss: 0.4627 - sparse_categorical_accuracy: 0.8418\n","Epoch 32/50\n","189/189 [==============================] - 16s 83ms/step - loss: 0.4592 - sparse_categorical_accuracy: 0.8449\n","Epoch 33/50\n","189/189 [==============================] - 15s 82ms/step - loss: 0.4324 - sparse_categorical_accuracy: 0.8497\n","Epoch 34/50\n","189/189 [==============================] - 15s 81ms/step - loss: 0.4400 - sparse_categorical_accuracy: 0.8489\n","Epoch 35/50\n","189/189 [==============================] - 16s 83ms/step - loss: 0.4240 - sparse_categorical_accuracy: 0.8535\n","Epoch 36/50\n","189/189 [==============================] - 15s 82ms/step - loss: 0.4151 - sparse_categorical_accuracy: 0.8574\n","Epoch 37/50\n","189/189 [==============================] - 15s 82ms/step - loss: 0.3979 - sparse_categorical_accuracy: 0.8637\n","Epoch 38/50\n","189/189 [==============================] - 15s 81ms/step - loss: 0.3862 - sparse_categorical_accuracy: 0.8699\n","Epoch 39/50\n","189/189 [==============================] - 15s 81ms/step - loss: 0.4215 - sparse_categorical_accuracy: 0.8578\n","Epoch 40/50\n","189/189 [==============================] - 16s 82ms/step - loss: 0.3854 - sparse_categorical_accuracy: 0.8681\n","Epoch 41/50\n","189/189 [==============================] - 16s 83ms/step - loss: 0.3650 - sparse_categorical_accuracy: 0.8759\n","Epoch 42/50\n","189/189 [==============================] - 15s 82ms/step - loss: 0.4527 - sparse_categorical_accuracy: 0.8488\n","Epoch 43/50\n","189/189 [==============================] - 16s 82ms/step - loss: 0.3836 - sparse_categorical_accuracy: 0.8729\n","Epoch 44/50\n","189/189 [==============================] - 15s 81ms/step - loss: 0.3413 - sparse_categorical_accuracy: 0.8823\n","Epoch 45/50\n","189/189 [==============================] - 15s 82ms/step - loss: 0.3253 - sparse_categorical_accuracy: 0.8882\n","Epoch 46/50\n","189/189 [==============================] - 16s 82ms/step - loss: 0.3084 - sparse_categorical_accuracy: 0.8962\n","Epoch 47/50\n","189/189 [==============================] - 16s 82ms/step - loss: 0.3339 - sparse_categorical_accuracy: 0.8866\n","Epoch 48/50\n","189/189 [==============================] - 16s 84ms/step - loss: 0.3164 - sparse_categorical_accuracy: 0.8907\n","Epoch 49/50\n","189/189 [==============================] - 16s 84ms/step - loss: 0.2924 - sparse_categorical_accuracy: 0.8999\n","Epoch 50/50\n","189/189 [==============================] - 16s 84ms/step - loss: 0.2801 - sparse_categorical_accuracy: 0.9046\n","313/313 [==============================] - 6s 15ms/step - loss: 0.8763 - sparse_categorical_accuracy: 0.8021\n","Test accuracy: 80.21%\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"wEyNtYt2bCn1"},"source":["## Experiment 2: Use supervised contrastive learning\n","\n","In this experiment, the model is trained in two phases. In the first phase,\n","the encoder is pretrained to optimize the supervised contrastive loss,\n","described in [Prannay Khosla et al.](https://arxiv.org/abs/2004.11362).\n","\n","In the second phase, the classifier is trained using the trained encoder with\n","its weights freezed; only the weights of fully-connected layers with the\n","softmax are optimized.\n","\n","### 1. Supervised contrastive learning loss function"]},{"cell_type":"code","metadata":{"id":"aX_gv79pbCn2","executionInfo":{"status":"ok","timestamp":1618036748116,"user_tz":420,"elapsed":834412,"user":{"displayName":"Lance N.","photoUrl":"","userId":"10641691903871358793"}}},"source":["\n","class SupervisedContrastiveLoss(keras.losses.Loss):\n","    def __init__(self, temperature=1, name=None):\n","        super(SupervisedContrastiveLoss, self).__init__(name=name)\n","        self.temperature = temperature\n","\n","    def __call__(self, labels, feature_vectors, sample_weight=None):\n","        # Normalize feature vectors\n","        feature_vectors_normalized = tf.math.l2_normalize(feature_vectors, axis=1)\n","        # Compute logits\n","        logits = tf.divide(\n","            tf.matmul(\n","                feature_vectors_normalized, tf.transpose(feature_vectors_normalized)\n","            ),\n","            self.temperature,\n","        )\n","        return tfa.losses.npairs_loss(tf.squeeze(labels), logits)\n","\n","\n","def add_projection_head(encoder):\n","    inputs = keras.Input(shape=input_shape)\n","    features = encoder(inputs)\n","    outputs = layers.Dense(projection_units, activation=\"relu\")(features)\n","    model = keras.Model(\n","        inputs=inputs, outputs=outputs, name=\"cifar-encoder_with_projection-head\"\n","    )\n","    return model\n"],"execution_count":8,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"nVn093RSbCn2"},"source":["### 2. Pretrain the encoder"]},{"cell_type":"code","metadata":{"id":"q9WZOWHDbCn3","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1618037540550,"user_tz":420,"elapsed":1626839,"user":{"displayName":"Lance N.","photoUrl":"","userId":"10641691903871358793"}},"outputId":"23e6eb37-89f8-477d-f8a0-0231fbea8721"},"source":["encoder = create_encoder()\n","\n","encoder_with_projection_head = add_projection_head(encoder)\n","encoder_with_projection_head.compile(\n","    optimizer=keras.optimizers.Adam(learning_rate),\n","    loss=SupervisedContrastiveLoss(temperature),\n",")\n","\n","encoder_with_projection_head.summary()\n","\n","history = encoder_with_projection_head.fit(\n","    x=x_train, y=y_train, batch_size=batch_size, epochs=num_epochs\n",")"],"execution_count":9,"outputs":[{"output_type":"stream","text":["Model: \"cifar-encoder_with_projection-head\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","input_8 (InputLayer)         [(None, 32, 32, 3)]       0         \n","_________________________________________________________________\n","cifar10-encoder (Functional) (None, 2048)              23564807  \n","_________________________________________________________________\n","dense_2 (Dense)              (None, 128)               262272    \n","=================================================================\n","Total params: 23,827,079\n","Trainable params: 23,781,632\n","Non-trainable params: 45,447\n","_________________________________________________________________\n","Epoch 1/50\n","189/189 [==============================] - 22s 83ms/step - loss: 5.5717\n","Epoch 2/50\n","189/189 [==============================] - 16s 83ms/step - loss: 5.1789\n","Epoch 3/50\n","189/189 [==============================] - 16s 83ms/step - loss: 5.0519\n","Epoch 4/50\n","189/189 [==============================] - 16s 83ms/step - loss: 4.9308\n","Epoch 5/50\n","189/189 [==============================] - 16s 83ms/step - loss: 4.8448\n","Epoch 6/50\n","189/189 [==============================] - 16s 83ms/step - loss: 4.7568\n","Epoch 7/50\n","189/189 [==============================] - 16s 84ms/step - loss: 4.6748\n","Epoch 8/50\n","189/189 [==============================] - 16s 84ms/step - loss: 4.6166\n","Epoch 9/50\n","189/189 [==============================] - 16s 83ms/step - loss: 4.5729\n","Epoch 10/50\n","189/189 [==============================] - 16s 83ms/step - loss: 4.4987\n","Epoch 11/50\n","189/189 [==============================] - 16s 82ms/step - loss: 4.4704\n","Epoch 12/50\n","189/189 [==============================] - 15s 82ms/step - loss: 4.4347\n","Epoch 13/50\n","189/189 [==============================] - 16s 83ms/step - loss: 4.3959\n","Epoch 14/50\n","189/189 [==============================] - 16s 82ms/step - loss: 4.3457\n","Epoch 15/50\n","189/189 [==============================] - 16s 84ms/step - loss: 4.3184\n","Epoch 16/50\n","189/189 [==============================] - 15s 82ms/step - loss: 4.2813\n","Epoch 17/50\n","189/189 [==============================] - 16s 84ms/step - loss: 4.2634\n","Epoch 18/50\n","189/189 [==============================] - 16s 83ms/step - loss: 4.2075\n","Epoch 19/50\n","189/189 [==============================] - 16s 84ms/step - loss: 4.2151\n","Epoch 20/50\n","189/189 [==============================] - 16s 83ms/step - loss: 4.1851\n","Epoch 21/50\n","189/189 [==============================] - 16s 83ms/step - loss: 4.1650\n","Epoch 22/50\n","189/189 [==============================] - 16s 84ms/step - loss: 4.1256\n","Epoch 23/50\n","189/189 [==============================] - 16s 82ms/step - loss: 4.1141\n","Epoch 24/50\n","189/189 [==============================] - 16s 83ms/step - loss: 4.0918\n","Epoch 25/50\n","189/189 [==============================] - 16s 83ms/step - loss: 4.0650\n","Epoch 26/50\n","189/189 [==============================] - 16s 83ms/step - loss: 4.0606\n","Epoch 27/50\n","189/189 [==============================] - 16s 83ms/step - loss: 4.0477\n","Epoch 28/50\n","189/189 [==============================] - 15s 82ms/step - loss: 4.0371\n","Epoch 29/50\n","189/189 [==============================] - 15s 81ms/step - loss: 4.0114\n","Epoch 30/50\n","189/189 [==============================] - 16s 83ms/step - loss: 3.9857\n","Epoch 31/50\n","189/189 [==============================] - 15s 82ms/step - loss: 3.9910\n","Epoch 32/50\n","189/189 [==============================] - 16s 83ms/step - loss: 3.9682\n","Epoch 33/50\n","189/189 [==============================] - 16s 83ms/step - loss: 3.9262\n","Epoch 34/50\n","189/189 [==============================] - 16s 83ms/step - loss: 3.9413\n","Epoch 35/50\n","189/189 [==============================] - 16s 83ms/step - loss: 3.9175\n","Epoch 36/50\n","189/189 [==============================] - 16s 84ms/step - loss: 3.9011\n","Epoch 37/50\n","189/189 [==============================] - 16s 83ms/step - loss: 3.8960\n","Epoch 38/50\n","189/189 [==============================] - 16s 83ms/step - loss: 3.8913\n","Epoch 39/50\n","189/189 [==============================] - 16s 82ms/step - loss: 3.8664\n","Epoch 40/50\n","189/189 [==============================] - 16s 83ms/step - loss: 3.8561\n","Epoch 41/50\n","189/189 [==============================] - 16s 83ms/step - loss: 3.8394\n","Epoch 42/50\n","189/189 [==============================] - 16s 84ms/step - loss: 3.8093\n","Epoch 43/50\n","189/189 [==============================] - 16s 83ms/step - loss: 3.8022\n","Epoch 44/50\n","189/189 [==============================] - 16s 83ms/step - loss: 3.8055\n","Epoch 45/50\n","189/189 [==============================] - 16s 83ms/step - loss: 3.7990\n","Epoch 46/50\n","189/189 [==============================] - 16s 83ms/step - loss: 3.7805\n","Epoch 47/50\n","189/189 [==============================] - 16s 83ms/step - loss: 3.7728\n","Epoch 48/50\n","189/189 [==============================] - 16s 83ms/step - loss: 3.7796\n","Epoch 49/50\n","189/189 [==============================] - 16s 83ms/step - loss: 3.7616\n","Epoch 50/50\n","189/189 [==============================] - 16s 83ms/step - loss: 3.7653\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"f4eK5DA-bCn3"},"source":["### 3. Train the classifier with the frozen encoder"]},{"cell_type":"code","metadata":{"id":"RYleBHJVbCn3","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1618037803688,"user_tz":420,"elapsed":1889971,"user":{"displayName":"Lance N.","photoUrl":"","userId":"10641691903871358793"}},"outputId":"8e10e86e-3873-4f17-e110-4b56f3d80f75"},"source":["classifier = create_classifier(encoder, trainable=False)\n","\n","history = classifier.fit(x=x_train, y=y_train, batch_size=batch_size, epochs=num_epochs)\n","\n","accuracy = classifier.evaluate(x_test, y_test)[1]\n","print(f\"Test accuracy: {round(accuracy * 100, 2)}%\")"],"execution_count":10,"outputs":[{"output_type":"stream","text":["Epoch 1/50\n","189/189 [==============================] - 9s 26ms/step - loss: 0.5049 - sparse_categorical_accuracy: 0.8696\n","Epoch 2/50\n","189/189 [==============================] - 5s 27ms/step - loss: 0.3123 - sparse_categorical_accuracy: 0.9043\n","Epoch 3/50\n","189/189 [==============================] - 5s 27ms/step - loss: 0.3153 - sparse_categorical_accuracy: 0.9026\n","Epoch 4/50\n","189/189 [==============================] - 5s 27ms/step - loss: 0.3004 - sparse_categorical_accuracy: 0.9053\n","Epoch 5/50\n","189/189 [==============================] - 5s 27ms/step - loss: 0.2860 - sparse_categorical_accuracy: 0.9105\n","Epoch 6/50\n","189/189 [==============================] - 5s 27ms/step - loss: 0.3077 - sparse_categorical_accuracy: 0.9045\n","Epoch 7/50\n","189/189 [==============================] - 5s 27ms/step - loss: 0.2947 - sparse_categorical_accuracy: 0.9084\n","Epoch 8/50\n","189/189 [==============================] - 5s 26ms/step - loss: 0.3030 - sparse_categorical_accuracy: 0.9041\n","Epoch 9/50\n","189/189 [==============================] - 5s 27ms/step - loss: 0.2953 - sparse_categorical_accuracy: 0.9079\n","Epoch 10/50\n","189/189 [==============================] - 5s 27ms/step - loss: 0.3007 - sparse_categorical_accuracy: 0.9065\n","Epoch 11/50\n","189/189 [==============================] - 5s 27ms/step - loss: 0.2849 - sparse_categorical_accuracy: 0.9084\n","Epoch 12/50\n","189/189 [==============================] - 5s 26ms/step - loss: 0.2944 - sparse_categorical_accuracy: 0.9027\n","Epoch 13/50\n","189/189 [==============================] - 5s 26ms/step - loss: 0.3006 - sparse_categorical_accuracy: 0.9044\n","Epoch 14/50\n","189/189 [==============================] - 5s 26ms/step - loss: 0.2936 - sparse_categorical_accuracy: 0.9062\n","Epoch 15/50\n","189/189 [==============================] - 5s 27ms/step - loss: 0.3053 - sparse_categorical_accuracy: 0.9007\n","Epoch 16/50\n","189/189 [==============================] - 5s 27ms/step - loss: 0.2939 - sparse_categorical_accuracy: 0.9069\n","Epoch 17/50\n","189/189 [==============================] - 5s 27ms/step - loss: 0.3154 - sparse_categorical_accuracy: 0.9018\n","Epoch 18/50\n","189/189 [==============================] - 5s 27ms/step - loss: 0.3000 - sparse_categorical_accuracy: 0.9027\n","Epoch 19/50\n","189/189 [==============================] - 5s 27ms/step - loss: 0.2990 - sparse_categorical_accuracy: 0.9057\n","Epoch 20/50\n","189/189 [==============================] - 5s 27ms/step - loss: 0.3011 - sparse_categorical_accuracy: 0.9060\n","Epoch 21/50\n","189/189 [==============================] - 5s 27ms/step - loss: 0.2915 - sparse_categorical_accuracy: 0.9081\n","Epoch 22/50\n","189/189 [==============================] - 5s 27ms/step - loss: 0.3018 - sparse_categorical_accuracy: 0.9026\n","Epoch 23/50\n","189/189 [==============================] - 5s 27ms/step - loss: 0.2928 - sparse_categorical_accuracy: 0.9062\n","Epoch 24/50\n","189/189 [==============================] - 5s 27ms/step - loss: 0.3064 - sparse_categorical_accuracy: 0.9041\n","Epoch 25/50\n","189/189 [==============================] - 5s 27ms/step - loss: 0.2862 - sparse_categorical_accuracy: 0.9088\n","Epoch 26/50\n","189/189 [==============================] - 5s 27ms/step - loss: 0.2954 - sparse_categorical_accuracy: 0.9060\n","Epoch 27/50\n","189/189 [==============================] - 5s 26ms/step - loss: 0.2845 - sparse_categorical_accuracy: 0.9075\n","Epoch 28/50\n","189/189 [==============================] - 5s 27ms/step - loss: 0.3077 - sparse_categorical_accuracy: 0.9056\n","Epoch 29/50\n","189/189 [==============================] - 5s 27ms/step - loss: 0.2933 - sparse_categorical_accuracy: 0.9088\n","Epoch 30/50\n","189/189 [==============================] - 5s 27ms/step - loss: 0.2911 - sparse_categorical_accuracy: 0.9086\n","Epoch 31/50\n","189/189 [==============================] - 5s 27ms/step - loss: 0.2859 - sparse_categorical_accuracy: 0.9093\n","Epoch 32/50\n","189/189 [==============================] - 5s 27ms/step - loss: 0.2893 - sparse_categorical_accuracy: 0.9071\n","Epoch 33/50\n","189/189 [==============================] - 5s 26ms/step - loss: 0.2980 - sparse_categorical_accuracy: 0.9062\n","Epoch 34/50\n","189/189 [==============================] - 5s 27ms/step - loss: 0.2907 - sparse_categorical_accuracy: 0.9059\n","Epoch 35/50\n","189/189 [==============================] - 5s 26ms/step - loss: 0.2966 - sparse_categorical_accuracy: 0.9063\n","Epoch 36/50\n","189/189 [==============================] - 5s 26ms/step - loss: 0.3009 - sparse_categorical_accuracy: 0.9042\n","Epoch 37/50\n","189/189 [==============================] - 5s 27ms/step - loss: 0.2881 - sparse_categorical_accuracy: 0.9077\n","Epoch 38/50\n","189/189 [==============================] - 5s 26ms/step - loss: 0.2982 - sparse_categorical_accuracy: 0.9063\n","Epoch 39/50\n","189/189 [==============================] - 5s 27ms/step - loss: 0.3022 - sparse_categorical_accuracy: 0.9037\n","Epoch 40/50\n","189/189 [==============================] - 5s 27ms/step - loss: 0.2926 - sparse_categorical_accuracy: 0.9057\n","Epoch 41/50\n","189/189 [==============================] - 5s 27ms/step - loss: 0.3101 - sparse_categorical_accuracy: 0.9019\n","Epoch 42/50\n","189/189 [==============================] - 5s 27ms/step - loss: 0.2885 - sparse_categorical_accuracy: 0.9069\n","Epoch 43/50\n","189/189 [==============================] - 5s 27ms/step - loss: 0.3140 - sparse_categorical_accuracy: 0.9011\n","Epoch 44/50\n","189/189 [==============================] - 5s 27ms/step - loss: 0.2923 - sparse_categorical_accuracy: 0.9085\n","Epoch 45/50\n","189/189 [==============================] - 5s 26ms/step - loss: 0.3015 - sparse_categorical_accuracy: 0.9031\n","Epoch 46/50\n","189/189 [==============================] - 5s 27ms/step - loss: 0.2828 - sparse_categorical_accuracy: 0.9102\n","Epoch 47/50\n","189/189 [==============================] - 5s 27ms/step - loss: 0.2995 - sparse_categorical_accuracy: 0.9035\n","Epoch 48/50\n","189/189 [==============================] - 5s 27ms/step - loss: 0.3021 - sparse_categorical_accuracy: 0.9054\n","Epoch 49/50\n","189/189 [==============================] - 5s 27ms/step - loss: 0.2949 - sparse_categorical_accuracy: 0.9051\n","Epoch 50/50\n","189/189 [==============================] - 5s 27ms/step - loss: 0.2846 - sparse_categorical_accuracy: 0.9082\n","313/313 [==============================] - 5s 14ms/step - loss: 0.6964 - sparse_categorical_accuracy: 0.8173\n","Test accuracy: 81.73%\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"VM5f0YeHbCn3"},"source":["We get to an improved test accuracy."]},{"cell_type":"markdown","metadata":{"id":"1Bp5ghcEbCn4"},"source":["## Conclusion\n","\n","As shown in the experiments, using the supervised contrastive learning technique\n","outperformed the conventional technique in terms of the test accuracy. Note that\n","the same training budget (i.e., number of epochs) was given to each technique.\n","Supervised contrastive learning pays off when the encoder involves a complex\n","architecture, like ResNet, and multi-class problems with many labels.\n","In addition, large batch sizes and multi-layer projection heads\n","improve its effectiveness. See the [Supervised Contrastive Learning](https://arxiv.org/abs/2004.11362)\n","paper for more details."]},{"cell_type":"markdown","metadata":{"id":"PASX974qbIGD"},"source":["# Pruno2D"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"U4z6AsmgbKkb","executionInfo":{"status":"ok","timestamp":1618037809144,"user_tz":420,"elapsed":1895421,"user":{"displayName":"Lance N.","photoUrl":"","userId":"10641691903871358793"}},"outputId":"6a80aa25-c6de-4074-c03d-93d1ffec8bd2"},"source":["!pip install -q git+https://github.com/LanceNorskog/keras-pruno.git\n","from keras_pruno import Pruno2D"],"execution_count":11,"outputs":[{"output_type":"stream","text":["  Building wheel for keras-pruno (setup.py) ... \u001b[?25l\u001b[?25hdone\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"ZfdSmonNbNkN","executionInfo":{"status":"ok","timestamp":1618039547113,"user_tz":420,"elapsed":487,"user":{"displayName":"Lance N.","photoUrl":"","userId":"10641691903871358793"}}},"source":["def create_encoder_pruno():\n","    resnet = keras.applications.ResNet50V2(\n","        include_top=False, weights=None, input_shape=input_shape, pooling=None\n","    )\n","    print('resnet.summary()')\n","    resnet.summary()\n","    inputs = keras.Input(shape=input_shape)\n","    augmented = data_augmentation(inputs)\n","    x = resnet(augmented)\n","    x = Pruno2D(similarity=0.65)(x)\n","    outputs = layers.GlobalAveragePooling2D()(x)\n","    model = keras.Model(inputs=inputs, outputs=outputs, name=\"cifar10-encoder\")\n","    return model\n","\n","def create_classifier_pruno(encoder, trainable=True):\n","\n","    for layer in encoder.layers:\n","        layer.trainable = trainable\n","\n","    inputs = keras.Input(shape=input_shape)\n","    features = encoder(inputs)\n","    features = Pruno2D(similarity=0.65)(features)\n","    features = layers.Dense(hidden_units, activation=\"relu\")(features)\n","    features = layers.Dropout(dropout_rate)(features)\n","    outputs = layers.Dense(num_classes, activation=\"softmax\")(features)\n","\n","    model = keras.Model(inputs=inputs, outputs=outputs, name=\"cifar10-classifier\")\n","    model.compile(\n","        optimizer=keras.optimizers.Adam(learning_rate),\n","        loss=keras.losses.SparseCategoricalCrossentropy(),\n","        metrics=[keras.metrics.SparseCategoricalAccuracy()],\n","    )\n","    return model\n"],"execution_count":18,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"UpAIQMW5bit9","executionInfo":{"status":"error","timestamp":1618039613524,"user_tz":420,"elapsed":66184,"user":{"displayName":"Lance N.","photoUrl":"","userId":"10641691903871358793"}},"outputId":"57334c6c-3aef-4887-c5ef-37600ad4392c"},"source":["encoder = create_encoder_pruno()\n","classifier = create_classifier(encoder)\n","classifier.summary()\n","\n","history = classifier.fit(x=x_train, y=y_train, batch_size=batch_size, epochs=num_epochs)\n","\n","accuracy = classifier.evaluate(x_test, y_test)[1]\n","print(f\"Test accuracy: {round(accuracy * 100, 2)}%\")\n"],"execution_count":19,"outputs":[{"output_type":"stream","text":["resnet.summary()\n","Model: \"resnet50v2\"\n","__________________________________________________________________________________________________\n","Layer (type)                    Output Shape         Param #     Connected to                     \n","==================================================================================================\n","input_17 (InputLayer)           [(None, 32, 32, 3)]  0                                            \n","__________________________________________________________________________________________________\n","conv1_pad (ZeroPadding2D)       (None, 38, 38, 3)    0           input_17[0][0]                   \n","__________________________________________________________________________________________________\n","conv1_conv (Conv2D)             (None, 16, 16, 64)   9472        conv1_pad[0][0]                  \n","__________________________________________________________________________________________________\n","pool1_pad (ZeroPadding2D)       (None, 18, 18, 64)   0           conv1_conv[0][0]                 \n","__________________________________________________________________________________________________\n","pool1_pool (MaxPooling2D)       (None, 8, 8, 64)     0           pool1_pad[0][0]                  \n","__________________________________________________________________________________________________\n","conv2_block1_preact_bn (BatchNo (None, 8, 8, 64)     256         pool1_pool[0][0]                 \n","__________________________________________________________________________________________________\n","conv2_block1_preact_relu (Activ (None, 8, 8, 64)     0           conv2_block1_preact_bn[0][0]     \n","__________________________________________________________________________________________________\n","conv2_block1_1_conv (Conv2D)    (None, 8, 8, 64)     4096        conv2_block1_preact_relu[0][0]   \n","__________________________________________________________________________________________________\n","conv2_block1_1_bn (BatchNormali (None, 8, 8, 64)     256         conv2_block1_1_conv[0][0]        \n","__________________________________________________________________________________________________\n","conv2_block1_1_relu (Activation (None, 8, 8, 64)     0           conv2_block1_1_bn[0][0]          \n","__________________________________________________________________________________________________\n","conv2_block1_2_pad (ZeroPadding (None, 10, 10, 64)   0           conv2_block1_1_relu[0][0]        \n","__________________________________________________________________________________________________\n","conv2_block1_2_conv (Conv2D)    (None, 8, 8, 64)     36864       conv2_block1_2_pad[0][0]         \n","__________________________________________________________________________________________________\n","conv2_block1_2_bn (BatchNormali (None, 8, 8, 64)     256         conv2_block1_2_conv[0][0]        \n","__________________________________________________________________________________________________\n","conv2_block1_2_relu (Activation (None, 8, 8, 64)     0           conv2_block1_2_bn[0][0]          \n","__________________________________________________________________________________________________\n","conv2_block1_0_conv (Conv2D)    (None, 8, 8, 256)    16640       conv2_block1_preact_relu[0][0]   \n","__________________________________________________________________________________________________\n","conv2_block1_3_conv (Conv2D)    (None, 8, 8, 256)    16640       conv2_block1_2_relu[0][0]        \n","__________________________________________________________________________________________________\n","conv2_block1_out (Add)          (None, 8, 8, 256)    0           conv2_block1_0_conv[0][0]        \n","                                                                 conv2_block1_3_conv[0][0]        \n","__________________________________________________________________________________________________\n","conv2_block2_preact_bn (BatchNo (None, 8, 8, 256)    1024        conv2_block1_out[0][0]           \n","__________________________________________________________________________________________________\n","conv2_block2_preact_relu (Activ (None, 8, 8, 256)    0           conv2_block2_preact_bn[0][0]     \n","__________________________________________________________________________________________________\n","conv2_block2_1_conv (Conv2D)    (None, 8, 8, 64)     16384       conv2_block2_preact_relu[0][0]   \n","__________________________________________________________________________________________________\n","conv2_block2_1_bn (BatchNormali (None, 8, 8, 64)     256         conv2_block2_1_conv[0][0]        \n","__________________________________________________________________________________________________\n","conv2_block2_1_relu (Activation (None, 8, 8, 64)     0           conv2_block2_1_bn[0][0]          \n","__________________________________________________________________________________________________\n","conv2_block2_2_pad (ZeroPadding (None, 10, 10, 64)   0           conv2_block2_1_relu[0][0]        \n","__________________________________________________________________________________________________\n","conv2_block2_2_conv (Conv2D)    (None, 8, 8, 64)     36864       conv2_block2_2_pad[0][0]         \n","__________________________________________________________________________________________________\n","conv2_block2_2_bn (BatchNormali (None, 8, 8, 64)     256         conv2_block2_2_conv[0][0]        \n","__________________________________________________________________________________________________\n","conv2_block2_2_relu (Activation (None, 8, 8, 64)     0           conv2_block2_2_bn[0][0]          \n","__________________________________________________________________________________________________\n","conv2_block2_3_conv (Conv2D)    (None, 8, 8, 256)    16640       conv2_block2_2_relu[0][0]        \n","__________________________________________________________________________________________________\n","conv2_block2_out (Add)          (None, 8, 8, 256)    0           conv2_block1_out[0][0]           \n","                                                                 conv2_block2_3_conv[0][0]        \n","__________________________________________________________________________________________________\n","conv2_block3_preact_bn (BatchNo (None, 8, 8, 256)    1024        conv2_block2_out[0][0]           \n","__________________________________________________________________________________________________\n","conv2_block3_preact_relu (Activ (None, 8, 8, 256)    0           conv2_block3_preact_bn[0][0]     \n","__________________________________________________________________________________________________\n","conv2_block3_1_conv (Conv2D)    (None, 8, 8, 64)     16384       conv2_block3_preact_relu[0][0]   \n","__________________________________________________________________________________________________\n","conv2_block3_1_bn (BatchNormali (None, 8, 8, 64)     256         conv2_block3_1_conv[0][0]        \n","__________________________________________________________________________________________________\n","conv2_block3_1_relu (Activation (None, 8, 8, 64)     0           conv2_block3_1_bn[0][0]          \n","__________________________________________________________________________________________________\n","conv2_block3_2_pad (ZeroPadding (None, 10, 10, 64)   0           conv2_block3_1_relu[0][0]        \n","__________________________________________________________________________________________________\n","conv2_block3_2_conv (Conv2D)    (None, 4, 4, 64)     36864       conv2_block3_2_pad[0][0]         \n","__________________________________________________________________________________________________\n","conv2_block3_2_bn (BatchNormali (None, 4, 4, 64)     256         conv2_block3_2_conv[0][0]        \n","__________________________________________________________________________________________________\n","conv2_block3_2_relu (Activation (None, 4, 4, 64)     0           conv2_block3_2_bn[0][0]          \n","__________________________________________________________________________________________________\n","max_pooling2d_18 (MaxPooling2D) (None, 4, 4, 256)    0           conv2_block2_out[0][0]           \n","__________________________________________________________________________________________________\n","conv2_block3_3_conv (Conv2D)    (None, 4, 4, 256)    16640       conv2_block3_2_relu[0][0]        \n","__________________________________________________________________________________________________\n","conv2_block3_out (Add)          (None, 4, 4, 256)    0           max_pooling2d_18[0][0]           \n","                                                                 conv2_block3_3_conv[0][0]        \n","__________________________________________________________________________________________________\n","conv3_block1_preact_bn (BatchNo (None, 4, 4, 256)    1024        conv2_block3_out[0][0]           \n","__________________________________________________________________________________________________\n","conv3_block1_preact_relu (Activ (None, 4, 4, 256)    0           conv3_block1_preact_bn[0][0]     \n","__________________________________________________________________________________________________\n","conv3_block1_1_conv (Conv2D)    (None, 4, 4, 128)    32768       conv3_block1_preact_relu[0][0]   \n","__________________________________________________________________________________________________\n","conv3_block1_1_bn (BatchNormali (None, 4, 4, 128)    512         conv3_block1_1_conv[0][0]        \n","__________________________________________________________________________________________________\n","conv3_block1_1_relu (Activation (None, 4, 4, 128)    0           conv3_block1_1_bn[0][0]          \n","__________________________________________________________________________________________________\n","conv3_block1_2_pad (ZeroPadding (None, 6, 6, 128)    0           conv3_block1_1_relu[0][0]        \n","__________________________________________________________________________________________________\n","conv3_block1_2_conv (Conv2D)    (None, 4, 4, 128)    147456      conv3_block1_2_pad[0][0]         \n","__________________________________________________________________________________________________\n","conv3_block1_2_bn (BatchNormali (None, 4, 4, 128)    512         conv3_block1_2_conv[0][0]        \n","__________________________________________________________________________________________________\n","conv3_block1_2_relu (Activation (None, 4, 4, 128)    0           conv3_block1_2_bn[0][0]          \n","__________________________________________________________________________________________________\n","conv3_block1_0_conv (Conv2D)    (None, 4, 4, 512)    131584      conv3_block1_preact_relu[0][0]   \n","__________________________________________________________________________________________________\n","conv3_block1_3_conv (Conv2D)    (None, 4, 4, 512)    66048       conv3_block1_2_relu[0][0]        \n","__________________________________________________________________________________________________\n","conv3_block1_out (Add)          (None, 4, 4, 512)    0           conv3_block1_0_conv[0][0]        \n","                                                                 conv3_block1_3_conv[0][0]        \n","__________________________________________________________________________________________________\n","conv3_block2_preact_bn (BatchNo (None, 4, 4, 512)    2048        conv3_block1_out[0][0]           \n","__________________________________________________________________________________________________\n","conv3_block2_preact_relu (Activ (None, 4, 4, 512)    0           conv3_block2_preact_bn[0][0]     \n","__________________________________________________________________________________________________\n","conv3_block2_1_conv (Conv2D)    (None, 4, 4, 128)    65536       conv3_block2_preact_relu[0][0]   \n","__________________________________________________________________________________________________\n","conv3_block2_1_bn (BatchNormali (None, 4, 4, 128)    512         conv3_block2_1_conv[0][0]        \n","__________________________________________________________________________________________________\n","conv3_block2_1_relu (Activation (None, 4, 4, 128)    0           conv3_block2_1_bn[0][0]          \n","__________________________________________________________________________________________________\n","conv3_block2_2_pad (ZeroPadding (None, 6, 6, 128)    0           conv3_block2_1_relu[0][0]        \n","__________________________________________________________________________________________________\n","conv3_block2_2_conv (Conv2D)    (None, 4, 4, 128)    147456      conv3_block2_2_pad[0][0]         \n","__________________________________________________________________________________________________\n","conv3_block2_2_bn (BatchNormali (None, 4, 4, 128)    512         conv3_block2_2_conv[0][0]        \n","__________________________________________________________________________________________________\n","conv3_block2_2_relu (Activation (None, 4, 4, 128)    0           conv3_block2_2_bn[0][0]          \n","__________________________________________________________________________________________________\n","conv3_block2_3_conv (Conv2D)    (None, 4, 4, 512)    66048       conv3_block2_2_relu[0][0]        \n","__________________________________________________________________________________________________\n","conv3_block2_out (Add)          (None, 4, 4, 512)    0           conv3_block1_out[0][0]           \n","                                                                 conv3_block2_3_conv[0][0]        \n","__________________________________________________________________________________________________\n","conv3_block3_preact_bn (BatchNo (None, 4, 4, 512)    2048        conv3_block2_out[0][0]           \n","__________________________________________________________________________________________________\n","conv3_block3_preact_relu (Activ (None, 4, 4, 512)    0           conv3_block3_preact_bn[0][0]     \n","__________________________________________________________________________________________________\n","conv3_block3_1_conv (Conv2D)    (None, 4, 4, 128)    65536       conv3_block3_preact_relu[0][0]   \n","__________________________________________________________________________________________________\n","conv3_block3_1_bn (BatchNormali (None, 4, 4, 128)    512         conv3_block3_1_conv[0][0]        \n","__________________________________________________________________________________________________\n","conv3_block3_1_relu (Activation (None, 4, 4, 128)    0           conv3_block3_1_bn[0][0]          \n","__________________________________________________________________________________________________\n","conv3_block3_2_pad (ZeroPadding (None, 6, 6, 128)    0           conv3_block3_1_relu[0][0]        \n","__________________________________________________________________________________________________\n","conv3_block3_2_conv (Conv2D)    (None, 4, 4, 128)    147456      conv3_block3_2_pad[0][0]         \n","__________________________________________________________________________________________________\n","conv3_block3_2_bn (BatchNormali (None, 4, 4, 128)    512         conv3_block3_2_conv[0][0]        \n","__________________________________________________________________________________________________\n","conv3_block3_2_relu (Activation (None, 4, 4, 128)    0           conv3_block3_2_bn[0][0]          \n","__________________________________________________________________________________________________\n","conv3_block3_3_conv (Conv2D)    (None, 4, 4, 512)    66048       conv3_block3_2_relu[0][0]        \n","__________________________________________________________________________________________________\n","conv3_block3_out (Add)          (None, 4, 4, 512)    0           conv3_block2_out[0][0]           \n","                                                                 conv3_block3_3_conv[0][0]        \n","__________________________________________________________________________________________________\n","conv3_block4_preact_bn (BatchNo (None, 4, 4, 512)    2048        conv3_block3_out[0][0]           \n","__________________________________________________________________________________________________\n","conv3_block4_preact_relu (Activ (None, 4, 4, 512)    0           conv3_block4_preact_bn[0][0]     \n","__________________________________________________________________________________________________\n","conv3_block4_1_conv (Conv2D)    (None, 4, 4, 128)    65536       conv3_block4_preact_relu[0][0]   \n","__________________________________________________________________________________________________\n","conv3_block4_1_bn (BatchNormali (None, 4, 4, 128)    512         conv3_block4_1_conv[0][0]        \n","__________________________________________________________________________________________________\n","conv3_block4_1_relu (Activation (None, 4, 4, 128)    0           conv3_block4_1_bn[0][0]          \n","__________________________________________________________________________________________________\n","conv3_block4_2_pad (ZeroPadding (None, 6, 6, 128)    0           conv3_block4_1_relu[0][0]        \n","__________________________________________________________________________________________________\n","conv3_block4_2_conv (Conv2D)    (None, 2, 2, 128)    147456      conv3_block4_2_pad[0][0]         \n","__________________________________________________________________________________________________\n","conv3_block4_2_bn (BatchNormali (None, 2, 2, 128)    512         conv3_block4_2_conv[0][0]        \n","__________________________________________________________________________________________________\n","conv3_block4_2_relu (Activation (None, 2, 2, 128)    0           conv3_block4_2_bn[0][0]          \n","__________________________________________________________________________________________________\n","max_pooling2d_19 (MaxPooling2D) (None, 2, 2, 512)    0           conv3_block3_out[0][0]           \n","__________________________________________________________________________________________________\n","conv3_block4_3_conv (Conv2D)    (None, 2, 2, 512)    66048       conv3_block4_2_relu[0][0]        \n","__________________________________________________________________________________________________\n","conv3_block4_out (Add)          (None, 2, 2, 512)    0           max_pooling2d_19[0][0]           \n","                                                                 conv3_block4_3_conv[0][0]        \n","__________________________________________________________________________________________________\n","conv4_block1_preact_bn (BatchNo (None, 2, 2, 512)    2048        conv3_block4_out[0][0]           \n","__________________________________________________________________________________________________\n","conv4_block1_preact_relu (Activ (None, 2, 2, 512)    0           conv4_block1_preact_bn[0][0]     \n","__________________________________________________________________________________________________\n","conv4_block1_1_conv (Conv2D)    (None, 2, 2, 256)    131072      conv4_block1_preact_relu[0][0]   \n","__________________________________________________________________________________________________\n","conv4_block1_1_bn (BatchNormali (None, 2, 2, 256)    1024        conv4_block1_1_conv[0][0]        \n","__________________________________________________________________________________________________\n","conv4_block1_1_relu (Activation (None, 2, 2, 256)    0           conv4_block1_1_bn[0][0]          \n","__________________________________________________________________________________________________\n","conv4_block1_2_pad (ZeroPadding (None, 4, 4, 256)    0           conv4_block1_1_relu[0][0]        \n","__________________________________________________________________________________________________\n","conv4_block1_2_conv (Conv2D)    (None, 2, 2, 256)    589824      conv4_block1_2_pad[0][0]         \n","__________________________________________________________________________________________________\n","conv4_block1_2_bn (BatchNormali (None, 2, 2, 256)    1024        conv4_block1_2_conv[0][0]        \n","__________________________________________________________________________________________________\n","conv4_block1_2_relu (Activation (None, 2, 2, 256)    0           conv4_block1_2_bn[0][0]          \n","__________________________________________________________________________________________________\n","conv4_block1_0_conv (Conv2D)    (None, 2, 2, 1024)   525312      conv4_block1_preact_relu[0][0]   \n","__________________________________________________________________________________________________\n","conv4_block1_3_conv (Conv2D)    (None, 2, 2, 1024)   263168      conv4_block1_2_relu[0][0]        \n","__________________________________________________________________________________________________\n","conv4_block1_out (Add)          (None, 2, 2, 1024)   0           conv4_block1_0_conv[0][0]        \n","                                                                 conv4_block1_3_conv[0][0]        \n","__________________________________________________________________________________________________\n","conv4_block2_preact_bn (BatchNo (None, 2, 2, 1024)   4096        conv4_block1_out[0][0]           \n","__________________________________________________________________________________________________\n","conv4_block2_preact_relu (Activ (None, 2, 2, 1024)   0           conv4_block2_preact_bn[0][0]     \n","__________________________________________________________________________________________________\n","conv4_block2_1_conv (Conv2D)    (None, 2, 2, 256)    262144      conv4_block2_preact_relu[0][0]   \n","__________________________________________________________________________________________________\n","conv4_block2_1_bn (BatchNormali (None, 2, 2, 256)    1024        conv4_block2_1_conv[0][0]        \n","__________________________________________________________________________________________________\n","conv4_block2_1_relu (Activation (None, 2, 2, 256)    0           conv4_block2_1_bn[0][0]          \n","__________________________________________________________________________________________________\n","conv4_block2_2_pad (ZeroPadding (None, 4, 4, 256)    0           conv4_block2_1_relu[0][0]        \n","__________________________________________________________________________________________________\n","conv4_block2_2_conv (Conv2D)    (None, 2, 2, 256)    589824      conv4_block2_2_pad[0][0]         \n","__________________________________________________________________________________________________\n","conv4_block2_2_bn (BatchNormali (None, 2, 2, 256)    1024        conv4_block2_2_conv[0][0]        \n","__________________________________________________________________________________________________\n","conv4_block2_2_relu (Activation (None, 2, 2, 256)    0           conv4_block2_2_bn[0][0]          \n","__________________________________________________________________________________________________\n","conv4_block2_3_conv (Conv2D)    (None, 2, 2, 1024)   263168      conv4_block2_2_relu[0][0]        \n","__________________________________________________________________________________________________\n","conv4_block2_out (Add)          (None, 2, 2, 1024)   0           conv4_block1_out[0][0]           \n","                                                                 conv4_block2_3_conv[0][0]        \n","__________________________________________________________________________________________________\n","conv4_block3_preact_bn (BatchNo (None, 2, 2, 1024)   4096        conv4_block2_out[0][0]           \n","__________________________________________________________________________________________________\n","conv4_block3_preact_relu (Activ (None, 2, 2, 1024)   0           conv4_block3_preact_bn[0][0]     \n","__________________________________________________________________________________________________\n","conv4_block3_1_conv (Conv2D)    (None, 2, 2, 256)    262144      conv4_block3_preact_relu[0][0]   \n","__________________________________________________________________________________________________\n","conv4_block3_1_bn (BatchNormali (None, 2, 2, 256)    1024        conv4_block3_1_conv[0][0]        \n","__________________________________________________________________________________________________\n","conv4_block3_1_relu (Activation (None, 2, 2, 256)    0           conv4_block3_1_bn[0][0]          \n","__________________________________________________________________________________________________\n","conv4_block3_2_pad (ZeroPadding (None, 4, 4, 256)    0           conv4_block3_1_relu[0][0]        \n","__________________________________________________________________________________________________\n","conv4_block3_2_conv (Conv2D)    (None, 2, 2, 256)    589824      conv4_block3_2_pad[0][0]         \n","__________________________________________________________________________________________________\n","conv4_block3_2_bn (BatchNormali (None, 2, 2, 256)    1024        conv4_block3_2_conv[0][0]        \n","__________________________________________________________________________________________________\n","conv4_block3_2_relu (Activation (None, 2, 2, 256)    0           conv4_block3_2_bn[0][0]          \n","__________________________________________________________________________________________________\n","conv4_block3_3_conv (Conv2D)    (None, 2, 2, 1024)   263168      conv4_block3_2_relu[0][0]        \n","__________________________________________________________________________________________________\n","conv4_block3_out (Add)          (None, 2, 2, 1024)   0           conv4_block2_out[0][0]           \n","                                                                 conv4_block3_3_conv[0][0]        \n","__________________________________________________________________________________________________\n","conv4_block4_preact_bn (BatchNo (None, 2, 2, 1024)   4096        conv4_block3_out[0][0]           \n","__________________________________________________________________________________________________\n","conv4_block4_preact_relu (Activ (None, 2, 2, 1024)   0           conv4_block4_preact_bn[0][0]     \n","__________________________________________________________________________________________________\n","conv4_block4_1_conv (Conv2D)    (None, 2, 2, 256)    262144      conv4_block4_preact_relu[0][0]   \n","__________________________________________________________________________________________________\n","conv4_block4_1_bn (BatchNormali (None, 2, 2, 256)    1024        conv4_block4_1_conv[0][0]        \n","__________________________________________________________________________________________________\n","conv4_block4_1_relu (Activation (None, 2, 2, 256)    0           conv4_block4_1_bn[0][0]          \n","__________________________________________________________________________________________________\n","conv4_block4_2_pad (ZeroPadding (None, 4, 4, 256)    0           conv4_block4_1_relu[0][0]        \n","__________________________________________________________________________________________________\n","conv4_block4_2_conv (Conv2D)    (None, 2, 2, 256)    589824      conv4_block4_2_pad[0][0]         \n","__________________________________________________________________________________________________\n","conv4_block4_2_bn (BatchNormali (None, 2, 2, 256)    1024        conv4_block4_2_conv[0][0]        \n","__________________________________________________________________________________________________\n","conv4_block4_2_relu (Activation (None, 2, 2, 256)    0           conv4_block4_2_bn[0][0]          \n","__________________________________________________________________________________________________\n","conv4_block4_3_conv (Conv2D)    (None, 2, 2, 1024)   263168      conv4_block4_2_relu[0][0]        \n","__________________________________________________________________________________________________\n","conv4_block4_out (Add)          (None, 2, 2, 1024)   0           conv4_block3_out[0][0]           \n","                                                                 conv4_block4_3_conv[0][0]        \n","__________________________________________________________________________________________________\n","conv4_block5_preact_bn (BatchNo (None, 2, 2, 1024)   4096        conv4_block4_out[0][0]           \n","__________________________________________________________________________________________________\n","conv4_block5_preact_relu (Activ (None, 2, 2, 1024)   0           conv4_block5_preact_bn[0][0]     \n","__________________________________________________________________________________________________\n","conv4_block5_1_conv (Conv2D)    (None, 2, 2, 256)    262144      conv4_block5_preact_relu[0][0]   \n","__________________________________________________________________________________________________\n","conv4_block5_1_bn (BatchNormali (None, 2, 2, 256)    1024        conv4_block5_1_conv[0][0]        \n","__________________________________________________________________________________________________\n","conv4_block5_1_relu (Activation (None, 2, 2, 256)    0           conv4_block5_1_bn[0][0]          \n","__________________________________________________________________________________________________\n","conv4_block5_2_pad (ZeroPadding (None, 4, 4, 256)    0           conv4_block5_1_relu[0][0]        \n","__________________________________________________________________________________________________\n","conv4_block5_2_conv (Conv2D)    (None, 2, 2, 256)    589824      conv4_block5_2_pad[0][0]         \n","__________________________________________________________________________________________________\n","conv4_block5_2_bn (BatchNormali (None, 2, 2, 256)    1024        conv4_block5_2_conv[0][0]        \n","__________________________________________________________________________________________________\n","conv4_block5_2_relu (Activation (None, 2, 2, 256)    0           conv4_block5_2_bn[0][0]          \n","__________________________________________________________________________________________________\n","conv4_block5_3_conv (Conv2D)    (None, 2, 2, 1024)   263168      conv4_block5_2_relu[0][0]        \n","__________________________________________________________________________________________________\n","conv4_block5_out (Add)          (None, 2, 2, 1024)   0           conv4_block4_out[0][0]           \n","                                                                 conv4_block5_3_conv[0][0]        \n","__________________________________________________________________________________________________\n","conv4_block6_preact_bn (BatchNo (None, 2, 2, 1024)   4096        conv4_block5_out[0][0]           \n","__________________________________________________________________________________________________\n","conv4_block6_preact_relu (Activ (None, 2, 2, 1024)   0           conv4_block6_preact_bn[0][0]     \n","__________________________________________________________________________________________________\n","conv4_block6_1_conv (Conv2D)    (None, 2, 2, 256)    262144      conv4_block6_preact_relu[0][0]   \n","__________________________________________________________________________________________________\n","conv4_block6_1_bn (BatchNormali (None, 2, 2, 256)    1024        conv4_block6_1_conv[0][0]        \n","__________________________________________________________________________________________________\n","conv4_block6_1_relu (Activation (None, 2, 2, 256)    0           conv4_block6_1_bn[0][0]          \n","__________________________________________________________________________________________________\n","conv4_block6_2_pad (ZeroPadding (None, 4, 4, 256)    0           conv4_block6_1_relu[0][0]        \n","__________________________________________________________________________________________________\n","conv4_block6_2_conv (Conv2D)    (None, 1, 1, 256)    589824      conv4_block6_2_pad[0][0]         \n","__________________________________________________________________________________________________\n","conv4_block6_2_bn (BatchNormali (None, 1, 1, 256)    1024        conv4_block6_2_conv[0][0]        \n","__________________________________________________________________________________________________\n","conv4_block6_2_relu (Activation (None, 1, 1, 256)    0           conv4_block6_2_bn[0][0]          \n","__________________________________________________________________________________________________\n","max_pooling2d_20 (MaxPooling2D) (None, 1, 1, 1024)   0           conv4_block5_out[0][0]           \n","__________________________________________________________________________________________________\n","conv4_block6_3_conv (Conv2D)    (None, 1, 1, 1024)   263168      conv4_block6_2_relu[0][0]        \n","__________________________________________________________________________________________________\n","conv4_block6_out (Add)          (None, 1, 1, 1024)   0           max_pooling2d_20[0][0]           \n","                                                                 conv4_block6_3_conv[0][0]        \n","__________________________________________________________________________________________________\n","conv5_block1_preact_bn (BatchNo (None, 1, 1, 1024)   4096        conv4_block6_out[0][0]           \n","__________________________________________________________________________________________________\n","conv5_block1_preact_relu (Activ (None, 1, 1, 1024)   0           conv5_block1_preact_bn[0][0]     \n","__________________________________________________________________________________________________\n","conv5_block1_1_conv (Conv2D)    (None, 1, 1, 512)    524288      conv5_block1_preact_relu[0][0]   \n","__________________________________________________________________________________________________\n","conv5_block1_1_bn (BatchNormali (None, 1, 1, 512)    2048        conv5_block1_1_conv[0][0]        \n","__________________________________________________________________________________________________\n","conv5_block1_1_relu (Activation (None, 1, 1, 512)    0           conv5_block1_1_bn[0][0]          \n","__________________________________________________________________________________________________\n","conv5_block1_2_pad (ZeroPadding (None, 3, 3, 512)    0           conv5_block1_1_relu[0][0]        \n","__________________________________________________________________________________________________\n","conv5_block1_2_conv (Conv2D)    (None, 1, 1, 512)    2359296     conv5_block1_2_pad[0][0]         \n","__________________________________________________________________________________________________\n","conv5_block1_2_bn (BatchNormali (None, 1, 1, 512)    2048        conv5_block1_2_conv[0][0]        \n","__________________________________________________________________________________________________\n","conv5_block1_2_relu (Activation (None, 1, 1, 512)    0           conv5_block1_2_bn[0][0]          \n","__________________________________________________________________________________________________\n","conv5_block1_0_conv (Conv2D)    (None, 1, 1, 2048)   2099200     conv5_block1_preact_relu[0][0]   \n","__________________________________________________________________________________________________\n","conv5_block1_3_conv (Conv2D)    (None, 1, 1, 2048)   1050624     conv5_block1_2_relu[0][0]        \n","__________________________________________________________________________________________________\n","conv5_block1_out (Add)          (None, 1, 1, 2048)   0           conv5_block1_0_conv[0][0]        \n","                                                                 conv5_block1_3_conv[0][0]        \n","__________________________________________________________________________________________________\n","conv5_block2_preact_bn (BatchNo (None, 1, 1, 2048)   8192        conv5_block1_out[0][0]           \n","__________________________________________________________________________________________________\n","conv5_block2_preact_relu (Activ (None, 1, 1, 2048)   0           conv5_block2_preact_bn[0][0]     \n","__________________________________________________________________________________________________\n","conv5_block2_1_conv (Conv2D)    (None, 1, 1, 512)    1048576     conv5_block2_preact_relu[0][0]   \n","__________________________________________________________________________________________________\n","conv5_block2_1_bn (BatchNormali (None, 1, 1, 512)    2048        conv5_block2_1_conv[0][0]        \n","__________________________________________________________________________________________________\n","conv5_block2_1_relu (Activation (None, 1, 1, 512)    0           conv5_block2_1_bn[0][0]          \n","__________________________________________________________________________________________________\n","conv5_block2_2_pad (ZeroPadding (None, 3, 3, 512)    0           conv5_block2_1_relu[0][0]        \n","__________________________________________________________________________________________________\n","conv5_block2_2_conv (Conv2D)    (None, 1, 1, 512)    2359296     conv5_block2_2_pad[0][0]         \n","__________________________________________________________________________________________________\n","conv5_block2_2_bn (BatchNormali (None, 1, 1, 512)    2048        conv5_block2_2_conv[0][0]        \n","__________________________________________________________________________________________________\n","conv5_block2_2_relu (Activation (None, 1, 1, 512)    0           conv5_block2_2_bn[0][0]          \n","__________________________________________________________________________________________________\n","conv5_block2_3_conv (Conv2D)    (None, 1, 1, 2048)   1050624     conv5_block2_2_relu[0][0]        \n","__________________________________________________________________________________________________\n","conv5_block2_out (Add)          (None, 1, 1, 2048)   0           conv5_block1_out[0][0]           \n","                                                                 conv5_block2_3_conv[0][0]        \n","__________________________________________________________________________________________________\n","conv5_block3_preact_bn (BatchNo (None, 1, 1, 2048)   8192        conv5_block2_out[0][0]           \n","__________________________________________________________________________________________________\n","conv5_block3_preact_relu (Activ (None, 1, 1, 2048)   0           conv5_block3_preact_bn[0][0]     \n","__________________________________________________________________________________________________\n","conv5_block3_1_conv (Conv2D)    (None, 1, 1, 512)    1048576     conv5_block3_preact_relu[0][0]   \n","__________________________________________________________________________________________________\n","conv5_block3_1_bn (BatchNormali (None, 1, 1, 512)    2048        conv5_block3_1_conv[0][0]        \n","__________________________________________________________________________________________________\n","conv5_block3_1_relu (Activation (None, 1, 1, 512)    0           conv5_block3_1_bn[0][0]          \n","__________________________________________________________________________________________________\n","conv5_block3_2_pad (ZeroPadding (None, 3, 3, 512)    0           conv5_block3_1_relu[0][0]        \n","__________________________________________________________________________________________________\n","conv5_block3_2_conv (Conv2D)    (None, 1, 1, 512)    2359296     conv5_block3_2_pad[0][0]         \n","__________________________________________________________________________________________________\n","conv5_block3_2_bn (BatchNormali (None, 1, 1, 512)    2048        conv5_block3_2_conv[0][0]        \n","__________________________________________________________________________________________________\n","conv5_block3_2_relu (Activation (None, 1, 1, 512)    0           conv5_block3_2_bn[0][0]          \n","__________________________________________________________________________________________________\n","conv5_block3_3_conv (Conv2D)    (None, 1, 1, 2048)   1050624     conv5_block3_2_relu[0][0]        \n","__________________________________________________________________________________________________\n","conv5_block3_out (Add)          (None, 1, 1, 2048)   0           conv5_block2_out[0][0]           \n","                                                                 conv5_block3_3_conv[0][0]        \n","__________________________________________________________________________________________________\n","post_bn (BatchNormalization)    (None, 1, 1, 2048)   8192        conv5_block3_out[0][0]           \n","__________________________________________________________________________________________________\n","post_relu (Activation)          (None, 1, 1, 2048)   0           post_bn[0][0]                    \n","==================================================================================================\n","Total params: 23,564,800\n","Trainable params: 23,519,360\n","Non-trainable params: 45,440\n","__________________________________________________________________________________________________\n","__init__: similarity: 0.65\n","Pruno2D.build: input_shape: (None, 1, 1, 2048)\n","Pruno2D.build: self.fmap_shape: (1, 1)\n","Model: \"cifar10-classifier\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","input_19 (InputLayer)        [(None, 32, 32, 3)]       0         \n","_________________________________________________________________\n","cifar10-encoder (Functional) (None, 2048)              23564807  \n","_________________________________________________________________\n","dropout_4 (Dropout)          (None, 2048)              0         \n","_________________________________________________________________\n","dense_5 (Dense)              (None, 512)               1049088   \n","_________________________________________________________________\n","dropout_5 (Dropout)          (None, 512)               0         \n","_________________________________________________________________\n","dense_6 (Dense)              (None, 10)                5130      \n","=================================================================\n","Total params: 24,619,025\n","Trainable params: 24,573,578\n","Non-trainable params: 45,447\n","_________________________________________________________________\n","Epoch 1/50\n","Pruno2D.call: type inputs.shape: <class 'tensorflow.python.framework.tensor_shape.TensorShape'>\n","Pruno2D.call: inputs.shape: (None, 1, 1, 2048)\n","Pruno2D.call: self.fmap_shape: (1, 1)\n","actual_batchsize: Tensor(\"cifar10-classifier/cifar10-encoder/pruno2d_3/strided_slice:0\", shape=(1,), dtype=int32)\n","Pruno2D.call: type inputs.shape: <class 'tensorflow.python.framework.tensor_shape.TensorShape'>\n","Pruno2D.call: inputs.shape: (None, 1, 1, 2048)\n","Pruno2D.call: self.fmap_shape: ListWrapper([1, 1])\n","actual_batchsize: Tensor(\"cifar10-classifier/cifar10-encoder/pruno2d_3/strided_slice:0\", shape=(1,), dtype=int32)\n"],"name":"stdout"},{"output_type":"error","ename":"InvalidArgumentError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mInvalidArgumentError\u001b[0m                      Traceback (most recent call last)","\u001b[0;32m<ipython-input-19-d1b938503373>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mclassifier\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msummary\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mhistory\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mclassifier\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mx_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0my_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbatch_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mbatch_size\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepochs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnum_epochs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0maccuracy\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mclassifier\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mevaluate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/engine/training.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_batch_size, validation_freq, max_queue_size, workers, use_multiprocessing)\u001b[0m\n\u001b[1;32m   1098\u001b[0m                 _r=1):\n\u001b[1;32m   1099\u001b[0m               \u001b[0mcallbacks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_train_batch_begin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1100\u001b[0;31m               \u001b[0mtmp_logs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1101\u001b[0m               \u001b[0;32mif\u001b[0m \u001b[0mdata_handler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshould_sync\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1102\u001b[0m                 \u001b[0mcontext\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masync_wait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    826\u001b[0m     \u001b[0mtracing_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexperimental_get_tracing_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    827\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mtrace\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTrace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_name\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mtm\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 828\u001b[0;31m       \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    829\u001b[0m       \u001b[0mcompiler\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"xla\"\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_experimental_compile\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0;34m\"nonXla\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    830\u001b[0m       \u001b[0mnew_tracing_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexperimental_get_tracing_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m_call\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    886\u001b[0m         \u001b[0;31m# Lifting succeeded, so variables are initialized and we can run the\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    887\u001b[0m         \u001b[0;31m# stateless function.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 888\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_stateless_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    889\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    890\u001b[0m       \u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfiltered_flat_args\u001b[0m \u001b[0;34m=\u001b[0m\u001b[0;31m \u001b[0m\u001b[0;31m\\\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   2941\u001b[0m        filtered_flat_args) = self._maybe_define_function(args, kwargs)\n\u001b[1;32m   2942\u001b[0m     return graph_function._call_flat(\n\u001b[0;32m-> 2943\u001b[0;31m         filtered_flat_args, captured_inputs=graph_function.captured_inputs)  # pylint: disable=protected-access\n\u001b[0m\u001b[1;32m   2944\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2945\u001b[0m   \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m_call_flat\u001b[0;34m(self, args, captured_inputs, cancellation_manager)\u001b[0m\n\u001b[1;32m   1917\u001b[0m       \u001b[0;31m# No tape is watching; skip to running the function.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1918\u001b[0m       return self._build_call_outputs(self._inference_function.call(\n\u001b[0;32m-> 1919\u001b[0;31m           ctx, args, cancellation_manager=cancellation_manager))\n\u001b[0m\u001b[1;32m   1920\u001b[0m     forward_backward = self._select_forward_and_backward_functions(\n\u001b[1;32m   1921\u001b[0m         \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36mcall\u001b[0;34m(self, ctx, args, cancellation_manager)\u001b[0m\n\u001b[1;32m    558\u001b[0m               \u001b[0minputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    559\u001b[0m               \u001b[0mattrs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mattrs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 560\u001b[0;31m               ctx=ctx)\n\u001b[0m\u001b[1;32m    561\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    562\u001b[0m           outputs = execute.execute_with_cancellation(\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/execute.py\u001b[0m in \u001b[0;36mquick_execute\u001b[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001b[0m\n\u001b[1;32m     58\u001b[0m     \u001b[0mctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mensure_initialized\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     59\u001b[0m     tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n\u001b[0;32m---> 60\u001b[0;31m                                         inputs, attrs, num_outputs)\n\u001b[0m\u001b[1;32m     61\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_NotOkStatusException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     62\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mname\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mInvalidArgumentError\u001b[0m:  Incompatible shapes: [530,1,2048] vs. [265,1,2048]\n\t [[node cifar10-classifier/cifar10-encoder/pruno2d_3/mul_1024 (defined at /usr/local/lib/python3.7/dist-packages/keras_pruno/pruno.py:98) ]] [Op:__inference_train_function_178669]\n\nErrors may have originated from an input operation.\nInput Source operations connected to node cifar10-classifier/cifar10-encoder/pruno2d_3/mul_1024:\n cifar10-classifier/cifar10-encoder/pruno2d_3/Reshape_3 (defined at /usr/local/lib/python3.7/dist-packages/keras_pruno/pruno.py:97)\t\n cifar10-classifier/cifar10-encoder/pruno2d_3/Reshape (defined at /usr/local/lib/python3.7/dist-packages/keras_pruno/pruno.py:244)\n\nFunction call stack:\ntrain_function\n"]}]},{"cell_type":"code","metadata":{"id":"vF6a3vi2cWAM","executionInfo":{"status":"aborted","timestamp":1618037812135,"user_tz":420,"elapsed":1898395,"user":{"displayName":"Lance N.","photoUrl":"","userId":"10641691903871358793"}}},"source":["encoder = create_encoder_pruno()\n","\n","encoder_with_projection_head = add_projection_head(encoder)\n","encoder_with_projection_head.compile(\n","    optimizer=keras.optimizers.Adam(learning_rate),\n","    loss=SupervisedContrastiveLoss(temperature),\n",")\n","\n","encoder_with_projection_head.summary()\n","\n","history = encoder_with_projection_head.fit(\n","    x=x_train, y=y_train, batch_size=batch_size, epochs=num_epochs\n",")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZjfUR-I7cbKT","executionInfo":{"status":"aborted","timestamp":1618037812136,"user_tz":420,"elapsed":1898391,"user":{"displayName":"Lance N.","photoUrl":"","userId":"10641691903871358793"}}},"source":["classifier = create_classifier(encoder, trainable=False)\n","\n","history = classifier.fit(x=x_train, y=y_train, batch_size=batch_size, epochs=num_epochs)\n","\n","accuracy = classifier.evaluate(x_test, y_test)[1]\n","print(f\"Test accuracy: {round(accuracy * 100, 2)}%\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Wt4isXl1rgYK"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"xq9Kx259riN7"},"source":["Resnet needs Pruno2D upstream from the "]}]}