{"cells":[{"cell_type":"markdown","metadata":{"id":"2pSGEJm0xPjH"},"source":["# DCGAN to generate face images\n","\n","**Author:** [fchollet](https://twitter.com/fchollet)\u003cbr\u003e\n","**Date created:** 2019/04/29\u003cbr\u003e\n","**Last modified:** 2021/01/01\u003cbr\u003e\n","**Description:** A simple DCGAN trained using `fit()` by overriding `train_step` on CelebA images."]},{"cell_type":"markdown","metadata":{"id":"jotLOS-HxPjO"},"source":["## Setup"]},{"cell_type":"code","execution_count":1,"metadata":{"executionInfo":{"elapsed":3739,"status":"ok","timestamp":1618458571697,"user":{"displayName":"Lance N.","photoUrl":"","userId":"10641691903871358793"},"user_tz":420},"id":"UyrrDA8IxPjP"},"outputs":[],"source":["import tensorflow as tf\n","from tensorflow import keras\n","from tensorflow.keras import layers\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import os\n","import gdown\n","from zipfile import ZipFile"]},{"cell_type":"markdown","metadata":{"id":"FrRI0CsM03Uv"},"source":[""]},{"cell_type":"markdown","metadata":{"id":"FQKC0nmTxPjQ"},"source":["## Prepare CelebA data\n","\n","We'll use face images from the CelebA dataset, resized to 64x64."]},{"cell_type":"code","execution_count":2,"metadata":{"executionInfo":{"elapsed":53899,"status":"ok","timestamp":1618458621869,"user":{"displayName":"Lance N.","photoUrl":"","userId":"10641691903871358793"},"user_tz":420},"id":"gL3Kv3BMxPjQ"},"outputs":[],"source":["if not os.path.exists(\"celeba_gan\"):\n","    os.makedirs(\"celeba_gan\")\n","\n","    url = \"https://drive.google.com/uc?id=1O7m1010EJjLE5QxLZiM9Fpjs7Oj6e684\"\n","    output = \"celeba_gan/data.zip\"\n","    gdown.download(url, output, quiet=True)\n","\n","    with ZipFile(\"celeba_gan/data.zip\", \"r\") as zipobj:\n","        zipobj.extractall(\"celeba_gan\")"]},{"cell_type":"markdown","metadata":{"id":"mClIwG6CxPjR"},"source":["Create a dataset from our folder, and rescale the images to the [0-1] range:"]},{"cell_type":"code","execution_count":31,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6282,"status":"ok","timestamp":1618460468772,"user":{"displayName":"Lance N.","photoUrl":"","userId":"10641691903871358793"},"user_tz":420},"id":"UPT7P6eWxPjR","outputId":"10730d26-d077-4a51-ad48-3f551c7ca78f"},"outputs":[{"name":"stdout","output_type":"stream","text":["Found 202599 files belonging to 1 classes.\n"]}],"source":["dataset = keras.preprocessing.image_dataset_from_directory(\n","    \"celeba_gan\", label_mode=None, image_size=(64, 64), batch_size=256\n",")\n","dataset = dataset.map(lambda x: x / 255.0)\n"]},{"cell_type":"markdown","metadata":{"id":"SGJDxZzaxPjR"},"source":["Let's display a sample image:"]},{"cell_type":"code","execution_count":32,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":248},"executionInfo":{"elapsed":8702,"status":"ok","timestamp":1618460471202,"user":{"displayName":"Lance N.","photoUrl":"","userId":"10641691903871358793"},"user_tz":420},"id":"kzAYb48RxPjS","outputId":"0fc31492-3c23-45c5-8d3d-1e0dc6d5bae8"},"outputs":[{"data":{"image/png":"\n","text/plain":["\u003cFigure size 432x288 with 1 Axes\u003e"]},"metadata":{"tags":[]},"output_type":"display_data"}],"source":["\n","for x in dataset:\n","    plt.axis(\"off\")\n","    plt.imshow((x.numpy() * 255).astype(\"int32\")[0])\n","    break\n"]},{"cell_type":"markdown","metadata":{"id":"i-6VkqqdxPjS"},"source":["## Create the discriminator\n","\n","It maps a 64x64 image to a binary classification score."]},{"cell_type":"code","execution_count":33,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":8694,"status":"ok","timestamp":1618460471203,"user":{"displayName":"Lance N.","photoUrl":"","userId":"10641691903871358793"},"user_tz":420},"id":"R_wGp3FixPjS","outputId":"de6391a0-a884-4ce2-a0d3-7a422ba0a4f3"},"outputs":[{"name":"stdout","output_type":"stream","text":["Model: \"discriminator\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","conv2d_16 (Conv2D)           (None, 32, 32, 64)        3136      \n","_________________________________________________________________\n","leaky_re_lu_24 (LeakyReLU)   (None, 32, 32, 64)        0         \n","_________________________________________________________________\n","conv2d_17 (Conv2D)           (None, 16, 16, 128)       131200    \n","_________________________________________________________________\n","leaky_re_lu_25 (LeakyReLU)   (None, 16, 16, 128)       0         \n","_________________________________________________________________\n","conv2d_18 (Conv2D)           (None, 8, 8, 128)         262272    \n","_________________________________________________________________\n","leaky_re_lu_26 (LeakyReLU)   (None, 8, 8, 128)         0         \n","_________________________________________________________________\n","flatten_4 (Flatten)          (None, 8192)              0         \n","_________________________________________________________________\n","dropout_4 (Dropout)          (None, 8192)              0         \n","_________________________________________________________________\n","dense_8 (Dense)              (None, 1)                 8193      \n","=================================================================\n","Total params: 404,801\n","Trainable params: 404,801\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}],"source":["discriminator = keras.Sequential(\n","    [\n","        keras.Input(shape=(64, 64, 3)),\n","        layers.Conv2D(64, kernel_size=4, strides=2, padding=\"same\"),\n","        layers.LeakyReLU(alpha=0.2),\n","        layers.Conv2D(128, kernel_size=4, strides=2, padding=\"same\"),\n","        layers.LeakyReLU(alpha=0.2),\n","        layers.Conv2D(128, kernel_size=4, strides=2, padding=\"same\"),\n","        layers.LeakyReLU(alpha=0.2),\n","        layers.Flatten(),\n","        layers.Dropout(0.2),\n","        layers.Dense(1, activation=\"sigmoid\"),\n","    ],\n","    name=\"discriminator\",\n",")\n","discriminator.summary()"]},{"cell_type":"markdown","metadata":{"id":"j5vbcYvkxPjT"},"source":["## Create the generator\n","\n","It mirrors the discriminator, replacing `Conv2D` layers with `Conv2DTranspose` layers."]},{"cell_type":"code","execution_count":34,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":8687,"status":"ok","timestamp":1618460471204,"user":{"displayName":"Lance N.","photoUrl":"","userId":"10641691903871358793"},"user_tz":420},"id":"byAxNFQjxPjT","outputId":"5578fefe-14eb-4e8e-ee98-6b94bd1b4615"},"outputs":[{"name":"stdout","output_type":"stream","text":["Model: \"generator\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","dense_9 (Dense)              (None, 8192)              1056768   \n","_________________________________________________________________\n","reshape_4 (Reshape)          (None, 8, 8, 128)         0         \n","_________________________________________________________________\n","conv2d_transpose_12 (Conv2DT (None, 16, 16, 128)       262272    \n","_________________________________________________________________\n","leaky_re_lu_27 (LeakyReLU)   (None, 16, 16, 128)       0         \n","_________________________________________________________________\n","conv2d_transpose_13 (Conv2DT (None, 32, 32, 256)       524544    \n","_________________________________________________________________\n","leaky_re_lu_28 (LeakyReLU)   (None, 32, 32, 256)       0         \n","_________________________________________________________________\n","conv2d_transpose_14 (Conv2DT (None, 64, 64, 512)       2097664   \n","_________________________________________________________________\n","leaky_re_lu_29 (LeakyReLU)   (None, 64, 64, 512)       0         \n","_________________________________________________________________\n","conv2d_19 (Conv2D)           (None, 64, 64, 3)         38403     \n","=================================================================\n","Total params: 3,979,651\n","Trainable params: 3,979,651\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}],"source":["latent_dim = 128\n","\n","generator = keras.Sequential(\n","    [\n","        keras.Input(shape=(latent_dim,)),\n","        layers.Dense(8 * 8 * 128),\n","        layers.Reshape((8, 8, 128)),\n","        layers.Conv2DTranspose(128, kernel_size=4, strides=2, padding=\"same\"),\n","        layers.LeakyReLU(alpha=0.2),\n","        layers.Conv2DTranspose(256, kernel_size=4, strides=2, padding=\"same\"),\n","        layers.LeakyReLU(alpha=0.2),\n","        layers.Conv2DTranspose(512, kernel_size=4, strides=2, padding=\"same\"),\n","        layers.LeakyReLU(alpha=0.2),\n","        layers.Conv2D(3, kernel_size=5, padding=\"same\", activation=\"sigmoid\"),\n","    ],\n","    name=\"generator\",\n",")\n","generator.summary()"]},{"cell_type":"markdown","metadata":{"id":"HWLEU-vuxPjT"},"source":["## Override `train_step`"]},{"cell_type":"code","execution_count":35,"metadata":{"executionInfo":{"elapsed":8679,"status":"ok","timestamp":1618460471204,"user":{"displayName":"Lance N.","photoUrl":"","userId":"10641691903871358793"},"user_tz":420},"id":"TwmOOPvHxPjU"},"outputs":[],"source":["\n","class GAN(keras.Model):\n","    def __init__(self, discriminator, generator, latent_dim):\n","        super(GAN, self).__init__()\n","        self.discriminator = discriminator\n","        self.generator = generator\n","        self.latent_dim = latent_dim\n","\n","    def compile(self, d_optimizer, g_optimizer, loss_fn):\n","        super(GAN, self).compile()\n","        self.d_optimizer = d_optimizer\n","        self.g_optimizer = g_optimizer\n","        self.loss_fn = loss_fn\n","        self.d_loss_metric = keras.metrics.Mean(name=\"d_loss\")\n","        self.g_loss_metric = keras.metrics.Mean(name=\"g_loss\")\n","\n","    @property\n","    def metrics(self):\n","        return [self.d_loss_metric, self.g_loss_metric]\n","\n","    def train_step(self, real_images):\n","        # Sample random points in the latent space\n","        batch_size = tf.shape(real_images)[0]\n","        random_latent_vectors = tf.random.normal(shape=(batch_size, self.latent_dim))\n","\n","        # Decode them to fake images\n","        generated_images = self.generator(random_latent_vectors)\n","\n","        # Combine them with real images\n","        combined_images = tf.concat([generated_images, real_images], axis=0)\n","\n","        # Assemble labels discriminating real from fake images\n","        labels = tf.concat(\n","            [tf.ones((batch_size, 1)), tf.zeros((batch_size, 1))], axis=0\n","        )\n","        # Add random noise to the labels - important trick!\n","        labels += 0.05 * tf.random.uniform(tf.shape(labels))\n","\n","        # Train the discriminator\n","        with tf.GradientTape() as tape:\n","            predictions = self.discriminator(combined_images)\n","            d_loss = self.loss_fn(labels, predictions)\n","        grads = tape.gradient(d_loss, self.discriminator.trainable_weights)\n","        self.d_optimizer.apply_gradients(\n","            zip(grads, self.discriminator.trainable_weights)\n","        )\n","\n","        # Sample random points in the latent space\n","        random_latent_vectors = tf.random.normal(shape=(batch_size, self.latent_dim))\n","\n","        # Assemble labels that say \"all real images\"\n","        misleading_labels = tf.zeros((batch_size, 1))\n","\n","        # Train the generator (note that we should *not* update the weights\n","        # of the discriminator)!\n","        with tf.GradientTape() as tape:\n","            predictions = self.discriminator(self.generator(random_latent_vectors))\n","            g_loss = self.loss_fn(misleading_labels, predictions)\n","        grads = tape.gradient(g_loss, self.generator.trainable_weights)\n","        self.g_optimizer.apply_gradients(zip(grads, self.generator.trainable_weights))\n","\n","        # Update metrics\n","        self.d_loss_metric.update_state(d_loss)\n","        self.g_loss_metric.update_state(g_loss)\n","        return {\n","            \"d_loss\": self.d_loss_metric.result(),\n","            \"g_loss\": self.g_loss_metric.result(),\n","        }\n"]},{"cell_type":"markdown","metadata":{"id":"eMw-S94UxPjU"},"source":["## Create a callback that periodically saves generated images"]},{"cell_type":"code","execution_count":36,"metadata":{"executionInfo":{"elapsed":8673,"status":"ok","timestamp":1618460471205,"user":{"displayName":"Lance N.","photoUrl":"","userId":"10641691903871358793"},"user_tz":420},"id":"KRqbpwmKxPjV"},"outputs":[],"source":["\n","class GANMonitor(keras.callbacks.Callback):\n","    def __init__(self, num_img=3, latent_dim=128):\n","        self.num_img = num_img\n","        self.latent_dim = latent_dim\n","\n","    def on_epoch_end(self, epoch, logs=None):\n","        random_latent_vectors = tf.random.normal(shape=(self.num_img, self.latent_dim))\n","        generated_images = self.model.generator(random_latent_vectors)\n","        generated_images *= 255\n","        generated_images.numpy()\n","        for i in range(self.num_img):\n","            img = keras.preprocessing.image.array_to_img(generated_images[i])\n","            img.save(\"generated_img_%03d_%d.png\" % (epoch, i))\n"]},{"cell_type":"markdown","metadata":{"id":"SUhkAXxbxPjV"},"source":["## Train the end-to-end model"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"id":"1CLNhr3RxPjW"},"outputs":[{"name":"stdout","output_type":"stream","text":["Epoch 1/25\n","792/792 - 480s - d_loss: 0.5663 - g_loss: 1.3431\n","Epoch 2/25\n","792/792 - 473s - d_loss: 0.6174 - g_loss: 1.3085\n","Epoch 3/25\n"]},{"ename":"KeyboardInterrupt","evalue":"ignored","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m\u003cipython-input-37-94f6885f75ee\u003e\u001b[0m in \u001b[0;36m\u003cmodule\u003e\u001b[0;34m()\u001b[0m\n\u001b[1;32m     10\u001b[0m gan.fit(\n\u001b[1;32m     11\u001b[0m     \u001b[0mdataset\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepochs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mepochs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcallbacks\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mGANMonitor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnum_img\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlatent_dim\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlatent_dim\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---\u003e 12\u001b[0;31m     \u001b[0mverbose\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m )\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/engine/training.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_batch_size, validation_freq, max_queue_size, workers, use_multiprocessing)\u001b[0m\n\u001b[1;32m   1098\u001b[0m                 _r=1):\n\u001b[1;32m   1099\u001b[0m               \u001b[0mcallbacks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_train_batch_begin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-\u003e 1100\u001b[0;31m               \u001b[0mtmp_logs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1101\u001b[0m               \u001b[0;32mif\u001b[0m \u001b[0mdata_handler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshould_sync\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1102\u001b[0m                 \u001b[0mcontext\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masync_wait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    826\u001b[0m     \u001b[0mtracing_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexperimental_get_tracing_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    827\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mtrace\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTrace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_name\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mtm\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 828\u001b[0;31m       \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    829\u001b[0m       \u001b[0mcompiler\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"xla\"\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_experimental_compile\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0;34m\"nonXla\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    830\u001b[0m       \u001b[0mnew_tracing_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexperimental_get_tracing_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m_call\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    853\u001b[0m       \u001b[0;31m# In this case we have created variables on the first call, so we run the\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    854\u001b[0m       \u001b[0;31m# defunned version which is guaranteed to never create variables.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 855\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_stateless_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# pylint: disable=not-callable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    856\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_stateful_fn\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    857\u001b[0m       \u001b[0;31m# Release the lock early so that multiple threads can perform the call\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   2941\u001b[0m        filtered_flat_args) = self._maybe_define_function(args, kwargs)\n\u001b[1;32m   2942\u001b[0m     return graph_function._call_flat(\n\u001b[0;32m-\u003e 2943\u001b[0;31m         filtered_flat_args, captured_inputs=graph_function.captured_inputs)  # pylint: disable=protected-access\n\u001b[0m\u001b[1;32m   2944\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2945\u001b[0m   \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m_call_flat\u001b[0;34m(self, args, captured_inputs, cancellation_manager)\u001b[0m\n\u001b[1;32m   1917\u001b[0m       \u001b[0;31m# No tape is watching; skip to running the function.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1918\u001b[0m       return self._build_call_outputs(self._inference_function.call(\n\u001b[0;32m-\u003e 1919\u001b[0;31m           ctx, args, cancellation_manager=cancellation_manager))\n\u001b[0m\u001b[1;32m   1920\u001b[0m     forward_backward = self._select_forward_and_backward_functions(\n\u001b[1;32m   1921\u001b[0m         \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36mcall\u001b[0;34m(self, ctx, args, cancellation_manager)\u001b[0m\n\u001b[1;32m    558\u001b[0m               \u001b[0minputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    559\u001b[0m               \u001b[0mattrs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mattrs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 560\u001b[0;31m               ctx=ctx)\n\u001b[0m\u001b[1;32m    561\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    562\u001b[0m           outputs = execute.execute_with_cancellation(\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/execute.py\u001b[0m in \u001b[0;36mquick_execute\u001b[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001b[0m\n\u001b[1;32m     58\u001b[0m     \u001b[0mctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mensure_initialized\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     59\u001b[0m     tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n\u001b[0;32m---\u003e 60\u001b[0;31m                                         inputs, attrs, num_outputs)\n\u001b[0m\u001b[1;32m     61\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_NotOkStatusException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     62\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mname\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}],"source":["epochs = 25  # In practice, use ~100 epochs\n","\n","gan = GAN(discriminator=discriminator, generator=generator, latent_dim=latent_dim)\n","gan.compile(\n","    d_optimizer=keras.optimizers.Adam(learning_rate=0.0001),\n","    g_optimizer=keras.optimizers.Adam(learning_rate=0.0001),\n","    loss_fn=keras.losses.BinaryCrossentropy(),\n",")\n","\n","gan.fit(\n","    dataset, epochs=epochs, callbacks=[GANMonitor(num_img=10, latent_dim=latent_dim)],\n","    verbose=2\n",")"]},{"cell_type":"markdown","metadata":{"id":"pKzkqrJ4xPjW"},"source":["Some of the last generated images around epoch 30\n","(results keep improving after that):\n","\n","![results](https://i.imgur.com/h5MtQZ7l.png)"]},{"cell_type":"markdown","metadata":{"id":"DXoVXSGJx6Hs"},"source":["# Pruno2D"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"b9dCqMu4yIcr"},"outputs":[],"source":["!pip install -q git+https://github.com/LanceNorskog/keras-pruno.git\n","from keras_pruno import Pruno2D"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"idX7u0rZx6vL"},"outputs":[],"source":["discriminator_pruno = keras.Sequential(\n","    [\n","        keras.Input(shape=(64, 64, 3)),\n","        layers.Conv2D(64, kernel_size=4, strides=2, padding=\"same\"),\n","        layers.LeakyReLU(alpha=0.2),\n","        layers.Conv2D(128, kernel_size=4, strides=2, padding=\"same\"),\n","        layers.LeakyReLU(alpha=0.2),\n","        layers.Conv2D(128, kernel_size=4, strides=2, padding=\"same\"),\n","        layers.LeakyReLU(alpha=0.2),\n","        Pruno2D(similarity=0.65),\n","        layers.Flatten(),\n","        layers.Dropout(0.2),\n","        layers.Dense(1, activation=\"sigmoid\"),\n","    ],\n","    name=\"discriminator\",\n",")\n","discriminator_pruno.summary()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"Is8LHXCj3xtB"},"outputs":[],"source":["latent_dim = 128\n","\n","generator_pruno = keras.Sequential(\n","    [\n","        keras.Input(shape=(latent_dim,)),\n","        layers.Dense(8 * 8 * 128),\n","        layers.Reshape((8, 8, 128)),\n","        layers.Conv2DTranspose(128, kernel_size=4, strides=2, padding=\"same\"),\n","        layers.LeakyReLU(alpha=0.2),\n","        layers.Conv2DTranspose(256, kernel_size=4, strides=2, padding=\"same\"),\n","        layers.LeakyReLU(alpha=0.2),\n","        layers.Conv2DTranspose(512, kernel_size=4, strides=2, padding=\"same\"),\n","        layers.LeakyReLU(alpha=0.2),\n","        Pruno2D(similarity=0.65),\n","        layers.Conv2D(3, kernel_size=5, padding=\"same\", activation=\"sigmoid\"),\n","    ],\n","    name=\"generator\",\n",")\n","generator_pruno.summary()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"la80oQjoyEqr"},"outputs":[],"source":["epochs = 25  # In practice, use ~100 epochs\n","\n","gan = GAN(discriminator=discriminator_pruno, generator=generator_pruno, latent_dim=latent_dim)\n","gan.compile(\n","    d_optimizer=keras.optimizers.Adam(learning_rate=0.0001),\n","    g_optimizer=keras.optimizers.Adam(learning_rate=0.0001),\n","    loss_fn=keras.losses.BinaryCrossentropy(),\n",")\n","\n","gan.fit(\n","    dataset, epochs=epochs, callbacks=[GANMonitor(num_img=10, latent_dim=latent_dim)]\n",")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"zP7ovCUR3jRq"},"outputs":[],"source":[""]}],"metadata":{"accelerator":"GPU","colab":{"collapsed_sections":[],"machine_shape":"hm","name":"Pruno2D Demo dcgan_overriding_train_step","provenance":[{"file_id":"https://github.com/keras-team/keras-io/blob/master/examples/generative/ipynb/dcgan_overriding_train_step.ipynb","timestamp":1618376836150}],"toc_visible":true,"version":""},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.0"}},"nbformat":4,"nbformat_minor":0}